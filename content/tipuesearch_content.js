var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Grouping', 'text': '亂數分組: \n Base upon the Dart + Python random grouping system and the\xa0 https://github.com/mdecourse/wcms-scrum1 \xa0( https://wcms-scrum1.herokuapp.com/gear_index ), we may be able to create more collaborative product design service. \n Flask Python programs can be deployed at Heroku or self install Ubuntu server. (\xa0 https://mdecp2018.github.io/finalproject-bgx/content/Heroku%20%E8%A8%AD%E5%AE%9A.html )\xa0 \n https://mde.tw/cd2020/downloads/2020spring_cd_2a_list.txt \xa0was taken from\xa0 https://osa.nfu.edu.tw/ \xa0on Feb. 19, 2020. \n The most updated list:\xa0 http://s1.mde.nfu.edu.tw:8000/?semester=1082&courseno=0767 \xa0 \n semester: 1082 \n courseno for 2a:\xa0 0767 \n courseno for 2b: 0780 \n Under https protocol use port 7443, for http use port 8000. \n Please note : since the certificate of s1.mde.nfu.edu.tw is self-signed, when use https to connect to this page, user need to first connect to\xa0 https://s1.mde.nfu.edu.tw:7443/?semester=1082&courseno=0767 \xa0to receive the ssh key to execute the following program. And also pay attention to the rules of\xa0 https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content . \n 學員名單 URL: \xa0 \n Dart source code for random grouping \n evenGrouping.dart: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n 90 \n 91 \n 92 \n 93 \n 94 \n 95 \n 96 \n 97 \n 98 \n 99 \n 100 \n 101 \n 102 \n 103 \n 104 \n 105 \n 106 \n 107 \n 108 \n 109 \n 110 \n 111 \n 112 \n 113 \n 114 \n 115 \n 116 \n 117 \n 118 \n 119 \n 120 \n 121 \n 122 \n 123 \n 124 \n 125 \n 126 \n 127 \n 128 \n 129 \n 130 \n 131 \n 132 \n 133 \n 134 \n 135 \n 136 \n 137 \n 138 \n 139 \n 140 \n 141 \n \n \n \n import   \'dart:html\' ; \n \xa0 \xa0 \n \xa0\xa0 InputElement studListUrl = querySelector( "#studListUrl" ); \n \xa0\xa0 String studUrl; \n \xa0\xa0 // 將 Label 改為 Textarea, 避免產生過程結果嵌入所在頁面 \n \xa0\xa0 TextAreaElement output = querySelector( "#output" ); \n \xa0 \xa0 \n main() { \n \xa0\xa0 querySelector( "#submit" ).onClick.listen((e) => grouping()); \n } \n \xa0 \xa0 \n grouping() { \n \xa0\xa0 output.innerHtml =  "" ; \n \xa0 \xa0 \n \xa0\xa0 if   (studListUrl.value !=  "" ) { \n \xa0\xa0\xa0\xa0 studUrl = studListUrl.value; \n \xa0\xa0 }  else   { \n \xa0\xa0\xa0\xa0 studUrl =  \'https://mde.tw/group/downloads/2019fall_cp_1a_list.txt\' ; \n \xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0 // 組序由 1 開始 \n \xa0\xa0 int gth = 1; \n \xa0\xa0 // 迴圈序號變數 \n \xa0\xa0 int i; \n \xa0\xa0 int j; \n \xa0\xa0 int total; \n \xa0\xa0 int inc; \n \xa0\xa0 // 每組學員暫存數列 \n \xa0\xa0 var gpList = []; \n \xa0\xa0 // 全班分組數列 \n \xa0\xa0 var group = []; \n \xa0\xa0 // 各組人數數列 \n \xa0\xa0 var numList = []; \n \xa0\xa0 var courseTitle =  \'cd2020\' ; \n \xa0 \xa0 \n \xa0\xa0 HttpRequest.getString(studUrl).then((String resp) { \n \xa0\xa0\xa0\xa0 // 利用 trim() 去除字串最後的跳行符號, 之後再利用 split() 根據 \\n 轉為數列 \n \xa0\xa0\xa0\xa0 var studList = resp.trim().split( "\\n" ); \n \xa0\xa0\xa0\xa0 // 數列利用 shuffle() 方法以隨機方法弄亂順序 \n \xa0\xa0\xa0\xa0 studList.shuffle(); \n \xa0\xa0\xa0\xa0 total = studList.length; \n \xa0\xa0\xa0\xa0 output.text +=  "全班總計"   + total.toString() +  " 人\\n" ; \n \xa0\xa0\xa0\xa0 numList = getNumList(studList.length); \n \xa0\xa0\xa0\xa0 inc = 0; \n \xa0\xa0\xa0\xa0 for   (i  in   numList){ \n \xa0\xa0\xa0\xa0\xa0\xa0 // 列印區隔符號 \n \xa0\xa0\xa0\xa0\xa0\xa0 output.text +=  \'=\'   * 20 +  "\\n" ; \n \xa0\xa0\xa0\xa0\xa0\xa0 output.text +=  "group $gth 有 "   + i.toString() +  " 人: \\n" ; \n \xa0\xa0\xa0\xa0\xa0\xa0 gpList = []; \n \xa0\xa0\xa0\xa0\xa0\xa0 for   (j = 0; j < i; j++){ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 output.text += studList[j+inc] +  "\\n" ; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // 在各分組數列中加入將對應的學員學號 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 gpList.add(studList[j+inc]); \n \xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0 gth = gth + 1; \n \xa0\xa0\xa0\xa0\xa0\xa0 inc = inc + j; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 //output.text += studList[j] + "\\n"; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 // 逐步將各組暫存的分組數列加入全班分組數列中 \n \xa0\xa0\xa0\xa0\xa0\xa0 gpList.sort(); \n \xa0\xa0\xa0\xa0\xa0\xa0 group.add(gpList); \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 // 列出全班分組數列 \n \xa0\xa0\xa0\xa0 output.text += group.toString() +  "\\n" ; \n \xa0\xa0\xa0\xa0 // 列出已經排序後的分組名單 \n \xa0\xa0\xa0\xa0 output.text +=  \'=\'   * 25 +  "\\n" ; \n \xa0\xa0\xa0\xa0 output.text +=  \'以下為排序後的各組成員名單: \\n\' ; \n \xa0\xa0\xa0\xa0 gth = 1; \n \xa0\xa0\xa0\xa0 /* \n \xa0\xa0\xa0\xa0 404231 \n \xa0\xa0\xa0\xa0 s4052 \n \xa0\xa0\xa0\xa0 4062 \n \xa0\xa0\xa0\xa0 s4072 \n \xa0\xa0\xa0\xa0 4082 \n \xa0\xa0\xa0\xa0 5072 \n \xa0\xa0\xa0\xa0 5083 \n \xa0\xa0\xa0\xa0 */ \n \xa0\xa0\xa0\xa0 // 先列出純文字以 \\n 跳行組員資料 \n \xa0\xa0\xa0\xa0 for   (i=0; i < group.length; i++){ \n \xa0\xa0\xa0\xa0\xa0\xa0 // 列印區隔符號 \n \xa0\xa0\xa0\xa0\xa0\xa0 output.text +=  \'=\'   * 20 +  "\\n" ; \n \xa0\xa0\xa0\xa0\xa0\xa0 output.text +=  "group $gth \\n" ; \n \xa0\xa0\xa0\xa0\xa0\xa0 gpList = []; \n \xa0\xa0\xa0\xa0\xa0\xa0 for   (j=0; j < group[i].length; j++){ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 output.text += group[i][j] +  "\\n" ; \n \xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0 gth = gth + 1; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 gth = 1; \n \xa0\xa0\xa0\xa0 // 最後列出超文件以 <br\\> 跳行組員資料, 包含倉儲與網站 \n \xa0\xa0\xa0\xa0 for   (i=0; i < group.length; i++){ \n \xa0\xa0\xa0\xa0\xa0\xa0 // 列印區隔符號 \n \xa0\xa0\xa0\xa0\xa0\xa0 output.text +=  \'\\n\'   +  \'=\'   * 30 +  "<br \\>" ; \n \xa0\xa0\xa0\xa0\xa0\xa0 output.text +=  "group $gth <br \\>" ; \n \xa0\xa0\xa0\xa0\xa0\xa0 gpList = []; \n \xa0\xa0\xa0\xa0\xa0\xa0 for   (j=0; j < group[i].length; j++){ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (group[i][j].startsWith( \'4052\' ) || group[i][j].startsWith( \'4072\' )) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 output.text +=  "Repository: <a href=\'https://github.com/s"   +  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 group[i][j] +  "/"   + courseTitle +  "\'>"   + group[i][j] +  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 "</a>"   +  " | Site: <a href=\'https://s"   + group[i][j] +  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ".github.io/"   + courseTitle +  "\'>"   + group[i][j] +  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 "</a><br \\>" ; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else   { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 output.text +=  "Repository: <a href=\'https://github.com/"   +  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 group[i][j] +  "/"   + courseTitle + "\'>"   + group[i][j] +  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 "</a>"   +  " | Site: <a href=\'https://"   + group[i][j] +  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ".github.io/"   + courseTitle +  "\'>"   + group[i][j] +  \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 "</a><br \\>" ; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0\xa0\xa0 gth = gth + 1; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0 }); \n } \n \xa0 \xa0 \n List getNumList(int total){ \n \xa0\xa0 // total student number \n \xa0\xa0 // int total = 65; \n \xa0\xa0 // initial each group expect to be "eachGrp" number of people \n \xa0\xa0 int eachGrp = 10; \n \xa0\xa0 // may divide into "grpNum" number of group \n \xa0\xa0 int grpNum = total ~/ eachGrp; \n \xa0\xa0 // vacant list \n \xa0\xa0 var splits = []; \n \xa0\xa0 // find remainder when total number divid into "grpNum" number of group \n \xa0\xa0 int remainder = total % grpNum; \n \xa0\xa0 // number of people in one group by calculation \n \xa0\xa0 int calGrp = total ~/ grpNum; \n \xa0 \xa0 \n \xa0\xa0 for   (int i = 0; i < grpNum; i++) { \n \xa0\xa0\xa0\xa0 splits.add(calGrp); \n \xa0\xa0 } \n \xa0\xa0 //print(splits); \n \xa0 \xa0 \n \xa0\xa0 for   (int i = 0; i < remainder; i++) { \n \xa0\xa0\xa0\xa0 splits[i] += 1; \n \xa0\xa0 } \n \xa0\xa0 //print(splits); \n \xa0\xa0 return   splits; \n \xa0 } \n \n \n \n \n \n \n \n index.html: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n \n \n \n < h1 >亂數分組:</ h1 > \n 學員名單 URL: < input   type = "text"   id = "studListUrl"   size = "50"   value = "https://mde.tw/wcm2020/downloads/2020spring_wcm_1a_list.txt" >< br   /> \n < input   type = "submit"   value = "開始分組"   id = "submit" >< br   /> \n < textarea   id = "output"   cols = "80"   rows = "10" ></ textarea > \n \n \n \n \n \n \n \n style.css: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n \n \n \n body { \n \xa0\xa0 color :  white ; \n \xa0\xa0 font-size :  20px ; \n } \n \xa0 \n input, select, textarea { \n font-size :  100% ; \n } \n \n \n \n \n \n \n \n get_student.py \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n \n \n \n from   flask  import   Flask, request  \n from   flask_cors  import   CORS \n \xa0 \n import   requests \n import   bs4 \n import   ssl \n \xa0 \n \'\'\' \n https://s1.mde.nfu.edu.tw:7443/?semester=1082&courseno=0767 \n cd \n 2a 1082/0767 \n 2b 1082/0780 \n \xa0 \n 2a 1072/0777 \n 2b 1072/0790 \n 2a 1062/0788 \n 2a 1062/0802 \n \xa0 \n wcm \n 1082/0744 \n \xa0 \n 1072/0754 \n 1062/0765 \n \xa0 \n wcmj \n 1082/2418 \n \'\'\' \n \xa0 \n app  =   Flask(__name__) \n CORS(app) \n \xa0 \n @app .route( \'/studlist\' ) \n @app .route( \'/\' ) \n def   studlist(): \n \xa0\xa0\xa0\xa0 semester  =   request.args.get( \'semester\' ) \n \xa0\xa0\xa0\xa0 courseno  =   request.args.get( \'courseno\' ) \n \xa0\xa0\xa0\xa0 if   semester  = =   None : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 semester  =   \'1082\' \n \xa0\xa0\xa0\xa0 if   courseno  = =   None : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 courseno  =   \'0744\' \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 url  =   \'https://osa.nfu.edu.tw/query/studlist_ajax.php\' \n \xa0\xa0\xa0\xa0 post_var  =   { \'pselyr\' : semester,  \'pseqno\' : courseno} \n \xa0 \n \xa0\xa0\xa0\xa0 result  =   requests.post(url, data  =   post_var) \n \xa0 \n \xa0\xa0\xa0\xa0 soup  =   bs4.BeautifulSoup(result.content,  \'lxml\' ) \n \xa0\xa0\xa0\xa0 table  =   soup.find( \'table\' , { \'class\' :  \'tbcls\' }) \n \xa0\xa0\xa0\xa0 data  =   [] \n \xa0\xa0\xa0\xa0 rows  =   table.find_all( \'tr\' ) \n \xa0\xa0\xa0\xa0 for   row  in   rows: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 cols  =   row.find_all( \'td\' ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 cols  =   [ele.text.strip()  for   ele  in   cols] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 data.append([ele  for   ele  in   cols  if   ele])  # Get rid of empty values \n \xa0\xa0\xa0\xa0 output  =   "" \n \xa0\xa0\xa0\xa0 for   i  in   data[ 2 :]: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 #print(i[0]) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 output  + = i[ 0 ]  +   "\\n" \n \xa0\xa0\xa0\xa0 return   output \n \xa0\xa0\xa0\xa0 #return\xa0 str(pselyr) + " + " +str(pseqno) \n \xa0 \n # 即使在近端仍希望以 https 模式下執行 \n context  =   ssl.SSLContext(ssl.PROTOCOL_TLSv1_2) \n context.load_cert_chain( \'localhost.crt\' ,  \'localhost.key\' ) \n \xa0 \n # 取 flaskapp.py 中的 uwsgi 變數設定 \n uwsgi  =   False \n if   uwsgi: \n \xa0\xa0\xa0\xa0 # 表示程式在雲端執行 \n \xa0\xa0\xa0\xa0 application  =   app \n else : \n \xa0\xa0\xa0\xa0 # 表示在近端執行, 以 python3 wsgi.py 執行 \n \xa0\xa0\xa0\xa0 app.run(host = \'127.0.0.1\' , port = 5443 , debug = True , ssl_context = context) \n \n \n \n \n \n \n \n nginx sites-available/default settings: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n \n \n \n server { \n \xa0\xa0\xa0\xa0 listen 8000; \n \xa0\xa0\xa0\xa0 server_name s1.mde.nfu.edu.tw; \n \xa0\xa0\xa0\xa0 charset utf-8; \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 listen 7443 ssl; \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 location /static { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 alias /home/kmol2019/course_studlist/static/; \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 location / { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 include uwsgi_params; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 uwsgi_pass\xa0 127.0.0.1:8087; \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 ssl_certificate /etc/stunnel/localhost.crt; \n \xa0\xa0\xa0\xa0 ssl_certificate_key /etc/stunnel/localhost.key; \n \xa0\xa0\xa0\xa0 ssl_session_timeout 5m; \n \xa0\xa0\xa0\xa0 ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2; \n \xa0\xa0\xa0\xa0 ssl_ciphers  "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES" ; \n \xa0\xa0\xa0\xa0 ssl_prefer_server_ciphers on; \n \xa0\xa0\xa0\xa0 try_files $uri $uri/ =404; \n } \n \n \n \n \n \n \n \n uwsgi7.ini \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n \n \n \n [uwsgi] \n socket = 127.0.0.1:8087 \n uid = kmol2019 \n gid = kmol2019 \n plugins-dir = /usr/lib/uwsgi/plugins/ \n plugin = python3 \n master =  true \n logto = / var /log/uwsgi/emperor.log \n logfile-chown = kmol2019:kmol2019 \n processes = 4 \n threads = 2 \n chdir = /home/kmol2019/course_studlist \n wsgi-file = /home/kmol2019/course_studlist/get_student.py \n \n \n \n \n \n \n \n /etc/systemd/system/cmsimfly.service \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n \n \n \n [Unit] \n Description=uWSGI to serve CMSimfly \n After=network.target \n \xa0 \n [Service] \n User=kmol2019 \n Group=kmol2019 \n WorkingDirectory=/home/kmol2019/uwsgi_ini \n ExecStart=/usr/local/bin/uwsgi --emperor /home/kmol2019/uwsgi_ini \n \xa0 \n [Install] \n WantedBy=multi-user.target \n \n \n \n \n \n', 'tags': '', 'url': 'Grouping.html'}, {'title': '2a', 'text': "============================== group 1 Repository: \xa0 40723104 \xa0 | Site: \xa0 40723104 Repository: \xa0 40723107 \xa0 | Site: \xa0 40723107 Repository: \xa0 40723114 \xa0 | Site: \xa0 40723114 \xa0 (group leader) Repository: \xa0 40723115 \xa0 | Site: \xa0 40723115 Repository: \xa0 40723118 \xa0 | Site: \xa0 40723118 Repository: \xa0 40723122 \xa0 | Site: \xa0 40723122 Repository: \xa0 40723123 \xa0 | Site: \xa0 40723123 Repository: \xa0 40723140 \xa0 | Site: \xa0 40723140 Repository: \xa0 40723149 \xa0 | Site: \xa0 40723149 Repository: \xa0 40723151 \xa0 | Site: \xa0 40723151 Repository: \xa0 40723153 \xa0 | Site: \xa0 40723153 Repository: \xa0 40723154 \xa0 | Site: \xa0 40723154 Repository: \xa0 40723155 \xa0 | Site: \xa0 40723155 ============================== group 2 Repository: \xa0 40623143 \xa0 | Site: \xa0 40623143 Repository: \xa0 40723108 \xa0 | Site: \xa0 40723108 Repository: \xa0 40723127 \xa0 | Site: \xa0 40723127 Repository: \xa0 40723132 \xa0 | Site: \xa0 40723132 Repository: \xa0 40723133 \xa0 | Site: \xa0 40723133 Repository: \xa0 40723137 \xa0 | Site: \xa0 40723137 Repository: \xa0 40723141 \xa0 | Site: \xa0 40723141 Repository: \xa0 40723143 \xa0 | Site: \xa0 40723143 Repository: \xa0 40723144 \xa0 | Site: \xa0 40723144 Repository: \xa0 40723147 \xa0 | Site: \xa0 40723147 Repository: \xa0 40723148 \xa0 | Site: \xa0 40723148 Repository: \xa0 40723150 \xa0 | Site: \xa0 40723150 \xa0 (group leader) ============================== group 3 Repository: \xa0 40723103 \xa0 | Site: \xa0 40723103 Repository: \xa0 40723110 \xa0 | Site: \xa0 40723110 \xa0 (group leader) Repository: \xa0 40723112 \xa0 | Site: \xa0 40723112 Repository: \xa0 40723120 \xa0 | Site: \xa0 40723120 Repository: \xa0 40723125 \xa0 | Site: \xa0 40723125 Repository: \xa0 40723126 \xa0 | Site: \xa0 40723126 Repository: \xa0 40723128 \xa0 | Site: \xa0 40723128 Repository: \xa0 40723130 \xa0 | Site: \xa0 40723130 Repository: \xa0 40723139 \xa0 | Site: \xa0 40723139 Repository: \xa0 40723142 \xa0 | Site: \xa0 40723142 Repository: \xa0 40723145 \xa0 | Site: \xa0 40723145 Repository: \xa0 40723146 \xa0 | Site: \xa0 40723146 ============================== group 4 Repository: \xa0 40423155 \xa0 | Site: \xa0 40423155 Repository: \xa0 40723101 \xa0 | Site: \xa0 40723101 Repository: \xa0 40723102 \xa0 | Site: \xa0 40723102 Repository: \xa0 40723106 \xa0 | Site: \xa0 40723106 Repository: \xa0 40723111 \xa0 | Site: \xa0 40723111 Repository: \xa0 40723119 \xa0 | Site: \xa0 40723119 Repository: \xa0 40723121 \xa0 | Site: \xa0 40723121 Repository: \xa0 40723124 \xa0 | Site: \xa0 40723124 Repository: \xa0 40723134 \xa0 | Site: \xa0 40723134 Repository: \xa0 40723135 \xa0 | Site: \xa0 40723135 Repository: \xa0 40723136 \xa0 | Site: \xa0 40723136 Repository: \xa0 40723138 \xa0 | Site: \xa0 40723138 \xa0 (group leader) \n Grouping List: \n [['40723104', '40723107', '40723114', '40723115', '40723118', '40723122', '40723123', '40723140', '40723149', '40723151', '40723153', '40723154', '40723155'], ['40623143', '40723108', '40723127', '40723132', '40723133', '40723137', '40723141', '40723143', '40723144', '40723147', '40723148', '40723150'], ['40723103', '40723110', '40723112', '40723120', '40723125', '40723126', '40723128', '40723130', '40723139', '40723142', '40723145', '40723146'], ['40423155', '40723101', '40723102', '40723106', '40723111', '40723119', '40723121', '40723124', '40723134', '40723135', '40723136', '40723138']] \n", 'tags': '', 'url': '2a.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'week', 'text': '', 'tags': '', 'url': 'week.html'}, {'title': 'week3', 'text': 'taskleader :40723145 40723126 40723146 \xa0 \xa0 \xa0 1. Describe how to do an efficient random grouping for this course or do the roll calling randomly? \n taskleader :40723110 40723112 40723130 \xa0 \xa0 \xa0 2. Describe how to prepare a portable Python programming system for Windows 10 64bit system to allow one the maintain CMSiMDE website, Pelican blog and Reveal.js presentation on Github? \n taskleader :40723125 40723103 40723120 40723142 \xa0 \xa0 \xa0 \xa03. What do you need to know from http://www.coppeliarobotics.com/helpFiles/index.html to implement a four-wheeled robot? \n w3開會紀錄 \n', 'tags': '', 'url': 'week3.html'}, {'title': 'week4', 'text': '\n', 'tags': '', 'url': 'week4.html'}, {'title': 'week5', 'text': '這周主要是在做分組的部分 \n 我們的設計都將從產品的想法開始。這些想法需要被驗證 , 因此 , 我們將著手構建原型 , 如果這些原型通過書面規範 , 我們將通過圖紙記錄我們的設計。我們需要此文檔才能以可重複的方式構建更多產品。本章將讓我們從僅僅對產品的想法出發 , 一直到以最佳方式構成所有單個物件的最終設計。我們從 " 空白紙 " 開始設計 , 那張紙將充滿物理性質。第一個令人關切的項目是確定紙張是否確實為 " 空白 " 或是否存在一些限制。下一個值得關注的項目是確定要包括哪些物理性質。然後 , 我們應該假設這些性質是基於整體設計目標的最佳配置 , 因此 , 我們將以一些詞語來總結我們對該物件配置的選擇。 \n \xa0 \n 2.1 起點 \n 設計師的任務是繼續對現有設計進行強化 , 或者開始全新的設計。讓我們花一點時間看看這些起點的區別是什麼。 \n \n 全新的設計 : 「清潔圖紙」是對設計師的開始 ; 除了遵守規範之外 , 它們基本上沒有任何限制。我們將有一整節關於規範的確切內容及其各種元件。 \n 延續 ( 或添加 ) 現有設計 : 這是全新設計的變體 , 但只能修改現有設計的一小部分。這裏的設計師對全新的設計有許多相同的挑戰 , 但額外的工作必須利用現有的設計。我們將有一個單獨的章節來定義 " 系統 " 在此背景下的確切內容。 \n 對現有的設計進行重大修改 : 同樣 , 這是全新設計的變體 , 但在這種情況下 , 將修改原始設計的很大一部分。這裏的設計師的任務是改變整體設計的一部分 , 因此比全新的設計有更多的約束。 \n \n 因此，重要的是要知道當前的設計工作將適合先前所做的工作。我們的“基本佈局”可以在有或沒有工作約束的情況下進行。 \n 2.2 定義設計邊界 : 系統描述 \n 定義正在設計的 " 系統 " 的幾句話 : 設計可能極其複雜和龐大 ( 如航天飛機或大型客機 ) 、更小的系統 ( 想想汽車 ), 或者更小的系統 , 如個人電腦、咖啡機或手機。所有這些設計項目的範圍，成本，時間，承諾的資源數量以及與其他設備的接口都不同。設計人員必須牢記正在設計的系統。這一點很重要 , 原因有很多 , 其中幾個原因包括 : \n \n 專注於個人責任 ( 工作範圍 ) \n 了解與該設計交互的其他設備 \n 整體 " 系統 " 功能 ( 而不僅僅是子系統的功能 ) \n \n 甚至像手機這樣“小”的東西也可以作為大系統的一部分。即，消費者購買的組合可以包含： \n \n 手機 \n 電池充電器 \n 電纜 \n Sim \xa0 卡 \n 說明書 \n 其他運輸材料 ( 標籤、袋子、氣泡包裝 )( 我們將限制此處對 " 系統 " 的討論 , 因為您甚至可以想到一個更大的系統 , 包括手機塔和衛星系統 ) 。我們從系統描述開始 , 因為大多數電子外殼都環繞和支援產品。有時 , 可以將一種產品視為較大產品的一部分。例如 , 網路適配器卡 ( 產品本身 ) 可以放入微電腦 ( 第二個產品 ), 並形成全新的產品 , 在此示例中 , 一個可聯網的微電腦。隨著可聯網的微電腦本身構成網路的一部分 , 情況變得更加複雜 , 而網路可能是更大的產品。從另一種方式來看 , 我們可能的任務是只設計一個更大系統的子系統。因此 , 我們的 " 系統 " 可能甚至不是產品 , 而僅僅是一個更大的 " 系統 " 的一部分 , 該系統已被分解為 ( 時間 ) 可管理的部分。 \n \n 圖 2.1 系統說明 \n 例如，我們的任務是設計一個數據記錄器，作為測量系統的一部分。該系統如圖 2.1 所示。該系統至少由三個主要子系統組成： \n \n 數據記錄器 \n 數據記錄器安裝支架 \n 測量桿（標記為“桿”），其中包括另一個子系統，即數據記錄器支架，實際上“系統”包括電纜、運輸容器（盒）和說明手冊（但在此示例中，我們將其忽略）。附帶說明一下，圖 2.1 中的系統是 Trimble Survey 系統的照片，該系統出現在華盛頓特區的史密森尼博物館中。我們已成為“測量員系統設計組”的團隊成員，並將設計一部分總體設計（數據記錄器部分）。因此，我們的首要任務是確定（指定）我們到底要設計什麼（在給定的時間內圍繞我們負責的項目建立“圍欄”之類的東西）。要完成此任務，我們將需要一個規範。（請參考第 1 章有關規範的討論。） \n \n 2.3設計過程 \n 2.3.1總體項目開始到項目完成 \n 設計可以以多種方式進行。所有公司在執行整個產品設計過程的方式上都有差異，但是它們確實具有一些共同的特徵。沒有什麼特別的方法是絕對正確的。最終結果（符合規範）是衡量成功的標準。設計通常按以下步驟進行： EPE 設計人員將承擔以下任務的“絕大部分”。他們將是許多工作的“執行者”和“推動者”。如果他們自己不做這項工作，那麼他們肯定得對這項工作負責。 \n 1.構思草圖–這是項目的“理想”階段。單詞必須變成這些圖片來表示。一旦想法採用某種形式，就可以輕鬆地對其進行審查和修訂。審核小組中的某些人需要對構想有“了解”才能真正看到所提出的內容。 \n 2.審查想法並授權進行原型製作 - 此操作將“想法圖片”轉化為團隊可以實際接觸的東西。現在可以以客戶使用產品的方式來拾取，保存和使用草圖形式中看起來不錯的產品；原型是一張完整的三維圖片。“進行授權”很重要，因為這些項目通常在時間和金錢上受到限制，因此這些支出必須由團隊同意。步驟 3 和 4 （如下）實際創建出原型。 \n 3.原型製作的想法圖（文件創建）–通常，將草圖轉換為數字化的圖文件，從而可以進行設計。（設計現在位於修訂版 1 。）包含斜體字，以表示正式文檔的“修訂級別”，第 12 章中對此進行了進一步擴展。 \n 4.原型製造（物理零件）–項目團隊將確定製造原型的成本和時間限制。有時候，只需要一個“快速而粗糙的”原型即可取得良好的進展。有時需要按照嚴格的規格來構造原型。 EPE 設計人員應該對開發階段需要什麼有很好的認識。 \n 5.原型分析和測試–團隊收到原型後，將對其進行測試以查看原型是否符合規範。項目團隊僅需要確定進行哪些測試，以決定測試之後如何進行。 \n 6.審查原型和測試結果–測試結果由團隊審查，並提出修訂建議。（假設版本 1 需要改進，我們將設計修訂為版本 2 。） \n 7.進行更改以改進原型（圖紙和原型）–這是迭代過程的開始，最終將使設計符合產品規格。 \n 8.對版本 2 的進一步分析和測試（假設版本 2 符合產品規格。） \n 9.產生最終文件 / 最終測試 / 最終審查 \n 10.正式批准生產發布的設計 \n \xa0 \n 請注意，上述過程中的“生產下達”允許生產“一定數量”的單元是生產並出售給客戶，或用作更多單元以用於更廣泛的測試程序。公司在為客戶發布和測試產品的過程上可以有多種方式的差異。另請注意，大多數項目的修訂版將比所示的兩個修訂版多很多，但是該項目通常會如所示進行。 \n 2.3.2 EPE設計器的開始注意事項 \n 沒有任何“絕對正確”的方式可以進行 EPE 設計器的設計。每種情況都有其獨特的最佳方法，以使可見的所需進度成為可能。有時，幾天之內就可以放在一起的原型可以為市場帶來令人難以置信的新產品突破。在其他情況下，最好的方法是採用系統的方法來提出一些可能的解決方案，而這些解決方案需要花費數月的時間才能完成。話雖如此，以下概述至少應該作為起點並對設計有用。 \n 1.確定與負載不直接相關的解決方案用途和要求。這些要求中一些更重要的是： \n （ a ）環境–產品將在哪裡使用？例如辦公室 / 室外 / 高空 / 車輛上。 \n （ b ）溫度–環境的極端溫度是多少？ \n （ c ）預期壽命–一次使用，多年保修，服務？ \n （ d ）成本要求–始終是重要的考慮因素。絕對將取決於生產的單元數量和工裝預算。 \n （ e ）加工要求–外觀細節可能會大大影響成本。 \n （ f ）尺寸和重量限制–當前行業解決方案的局限性是什麼？影響設計師選擇的材料 / 製造技術。 \n （ g ）安全和法規要求–產品故障的影響是什麼？以上所有這些都是 EPE 設計器設計之初要考慮的重要考慮因素。例如，室內與室外環境會產生不同的設計。與預期使用“一次”的設計相比，需要經過 1000 次使用後的設計產生了不同的設計。成本低於 5 美元的設計與成本低於 100 美元的設計產生了不同的設計。通過遍歷以上每個元素， EPE 設計人員可以確定一些初始約束。 \n 2.根據可能需要單個構件（和組件）承受的所有各種可能類型的載荷來確定或估算工作載荷。有必要考慮所有可能的載荷組合，並在可能的情況下確定載荷與時間之間的關係。一些可能的載荷類型為： \n （ a ）靜態 \n （ b ）穩態動態（振動） \n （ c ）瞬態動態 \n （ d ）衝擊或撞擊 \n （ e ）身體接觸，例如點載荷或摩擦力 \n （ f ）其他載荷，例如熱 / 重力 / 聲學載荷上述載荷確定對於 EPE 設計者的設計也是非常重要的考慮因素。例如， 10 磅靜態負載與 100 磅靜態負載產生了不同的設計。如果這些負載隨時間變化，這將導致不同的設計解決方案。確定負載的大小和類型將直接確定支撐電氣組件所需的材料和橫截面形狀。 \n 3.確定故障機制。變形是由於軸向，剪切，彎曲或扭轉載荷而發生的。可能的失效模式為： \n （ a ）總體屈服（整體非彈性行為） \n （ b ）破裂或斷裂 \n （ c ）突然–由脆性材料上的靜態或動態載荷引起 \n （ d ）緩慢–由延性材料上的靜態載荷引起 \n （ e ）漸進式–由反复的載荷引起（疲勞） \n （ f ）過度變形 \n （ g ）屈曲 \n （ h ）蠕變–在恆定應力下變形 \n （ i ）鬆弛–在恆定應變下改變應力 \n （ j ）磨損（磨損） \n （ k ）腐蝕 \n EPE設計人員確定他們的設計將如何失敗（在當前設計狀態下），有可能修改該設計以防止失敗。測試還將揭示一些故障機制。然而，如果在測試之前可以考慮其中一些故障機制，則可以節省很多開發成本。總結以上三項，通過確定設計的用例，負載和潛在的故障機制， EPE 設計人員可以在紮實的基礎上進行設計。 \n 2.4 最佳物件放置 \n 大多數設計都可以認為是物體在空間的物理放置。對像是整個程式集的單獨部分。某些單獨的部件是完全已知的 ( 它們要麼從另一家公司的貨架上購買 , 要麼重複使用以前在內部設計的部件 ) 。除了 " 已知 " 零件外 , 其他部件還需要全新設計。這些新部件可在內部生產 , 也可以完全指定由另一家公司生產。電子包裝設計主要包括將子系統安排到最有效的排列中。決定這種安排的第一步是查看子系統的單獨卷。這些卷 , 以及它們之間清除所需的 " 間隙 ", 通常會設置 " 外部邊界 ", 因此 , 在很大程度上設置產品的總體尺寸。有時 , 設計人員首先採用的標準是產品的整體尺寸。從這裏 , 他們必須決定它們能否在給定的總體大小內容納所有要求的內容。也就是說 , 我們的子系統可能確實需要收縮以適應這個給定的總體規模。基本設計過程的一個方面如圖 2.2 所示。這顯示了一個物體 ( 在太空中 ) 與外殼 ( 顯示為 " 牆 ") 的距離。我想開始討論電子外殼的設計 , 描述幾個設計 " 場景 " 。討論的大部分內容都是針對 \xa0 2D( 平面視圖 , 從上面 ) 的情況 , 但很容易擴展為包括 \xa0 3D( 側視圖或 \xa0 Z \xa0 方向 ), 我將展示第三視圖的一些示例 : 基本物件 / 牆間隙 : 圖 \xa0 2.2 \xa0 顯示了物件和牆。 " 物件 " 可以被視為任何內容。例如 , 它可以是印刷電路板元件、汽車發動機或任何電子元件。 " 牆 " 可視為表面外的外殼或所設計物品的外部。在幾乎每一個設計中 , 設計師都必須確定 " 物件 " 和 " 牆 " 之間的距離 ( 間隙 ) 。這裡的想法可以擴展到確定物件 \xa0 1 \xa0 和物件 \xa0 2 \xa0 之間的距離。這些確定的間隙都不需要彼此相同。 X \xa0 方向中的間隙可能不同於 \xa0 Y \xa0 方向中的間隙 , 後者也可能與 \xa0 Z \xa0 方向中的間隙不同。 \n 2.4.1間隙距離 \n \xa0 \n 1.物體和牆壁的公差：如果要保持特定的距離（例如，假設為 0.100 英寸）和標稱的整體（外部）尺寸，則設計必須考慮以下因素：•最厚的牆壁在其極限處公差•最大可能的物體（在物體公差的最高極限處）請注意，最厚的壁和最大的物體都減小了 0.100 英寸的標稱間隙距離。（還請注意，最薄的壁和最小的物體都可以增加 0.100 英寸的標稱間隙距離。）•必須考慮將物體固定在盒子上。也就是說，緊固系統將允許物體在多大程度上靠近牆壁？假設對像上有一個簡單的安裝孔，盒子上有一個螺紋凸台。物體上的孔（比）要大一些（用於將物體固定到盒子的螺紋凸台中的螺釘）。因此，如果緊固件位於通孔的一側邊緣，則物體可能會更靠近牆壁。還必須考慮盒形螺紋凸台位置的位置公差（相對於盒壁），因為凸台實際上可能更靠近壁（由於製造公差）。通常，可以忽略此“緊固公差”，但某些間隙在有限的緊湊空間設計中，這可能很關鍵。因此，對於到目前為止的間隙示例，僅考慮公差，我們可以具有以下公差：•壁厚可以厚 0.005 英寸。（在“受限”的整體尺寸下，所有這些都會增加盒子內部的壁厚）。•物體本身（將孔安裝到物體邊緣）可能處於最大位置公差；這可能是 0.010 英寸。 \n \n 由於其位置公差，盒子中的安裝凸台可能更靠近牆壁。這可能是 0.005 英寸。•安裝孔可能比（最小）緊固件直徑大 0.010 英寸，從而允許額外移動 0.005 英寸。以上所有（ 4 ）公差都加到 0.005 + 0.010 + 0.005 + 0.005 ，總計為 0.025 英寸。 \n', 'tags': '', 'url': 'week5.html'}, {'title': 'week6', 'text': '這週主要是在做分組的部分 \n 3.4結構問題：靜載荷 \n 同樣，由於本文並不打算涵蓋所遇到的所有各種結構性考慮事項或問題，因此我想強調一些突出以下內容的問題（我將其保留為三個）：•可以認為是以下兩個問題之一“個體”是指將載荷和力施加到要設計的單個構件或“整體結構”上，也就是說，可以是對整個（組裝）結構的分析。•許多單個零件（或子裝配體）的供應商會在自己的文獻中提供設計指南，這些指南肯定可供單個設計師使用。這些信息大部分基於多年來獲得的經驗和分析經驗。告誡設計人員了解任何這些信息的背景和限制。以圖形或表格格式顯示的某些信息植根於基本原理，但這可能並不明顯。這種可用的“供應商數據”類型的一些示例是塑料，密封件，EMI組件和軸承（僅舉幾例）的設計。 \n 電子外殼中 \n 的構件上的靜態載荷是由於：1.構件自身的重量 \n 2.其他構件施加的載荷 \n 3.由於熱效應，殘餘應力等引起的載荷。靜態載荷會導致構件受力而導致失效： \n 1.超出材料的屈服強度。 \n 2.構件的過度撓曲，導致構件的性能超出設計意圖。由於所有載荷都會產生一定的撓度，因此必須在設計中的某個時刻知道允許構件產生多少撓度。靜態載荷下的斷裂破壞在韌性材料中不如在脆性材料中常見。在延性構件中，失效通常是由於過度的非彈性作用而導致的，該過度的彈性作用導致在斷裂之前很長的整體變形。動態加載將在Sect中介紹。3.5。動態負載通常是隨時間變化的負載，而靜態負載在相對較短的時間內不會發生顯著變化。電子外殼設計中常見的一些動態載荷是重複載荷，衝擊載荷和能量載荷。能量負荷是指在撞擊期間傳輸的能量（比作用力）更容易表達的負荷。重複載荷造成的斷裂通常稱為“疲勞”故障。振動可能會導致疲勞失效。以下三個問題通常涵蓋的主題是： \n 1.什麼是光束（相對於平板）？ \n 2.應力公式和最大應力。 \n 3.撓度公式和最大撓度。4.截面模量。 \n 5.彈性模量。6.結束條件。7.負載條件。8.最壞的情況下加載。9.組合加載。 \n 3.4.1懸臂梁分析（來自Tecknit EMI屏蔽產品手冊） \n 大多數電子外殼應力分析都可以通過計算“簡單”梁來表徵。但是，首先讓我們定義一個光束。Roark和Young（請參閱參考資料[1]）對樑的撓曲公式的應用進行以下假設：•樑的長度必須與其深度成比例，對於金屬梁，跨度/深度比應為8或更大，而15為15或更多用於具有相對薄腹板的梁。Byars和Snyder（參見參考文獻[2]）是一個很好的例子，如圖3.3所示。確定法蘭正下方的A點處的主要法向應力和剪應力。假定彈性行為，並忽略壁上的任何應力集中。解決方案：梁左端的彎矩為： \n （當考慮問題中的彎曲應力和剪切應力時，使用莫爾圓來求總應力。）但是，請注意，在這樣短的構件中，其橫截面薄（跨度/深度比= 24/15） = 1.7），則撓曲公式的有效性值得懷疑。請注意，例如，剪應力和法向應力的數量級相同。另外，請注意，要應用正確的跨度/深度比，此樑的長度必須在19英尺的數量級上。以上示例的重要性在於強調了橫向剪應力對最大應力的影響。確定樑的最大應力時，除非用盡所有可能產生最大主應力的彎曲應力和剪切應力組合，否則對結果不滿意。經常，剪切和彎矩圖的構建以及彎曲應力和橫向剪切應力的數量級比較將大大簡化問題。使用上面示例中的一些梁應力公式，我們將繼續解決電子外殼設計人員可能面臨的問題的“主推力”。那就是確定“蓋板”到外殼底盤的（最大）緊固件距離（“ C”）。這種類型的問題涉及外殼周圍的環境密封，這將提供密封作用（請參閱參考資料6）•防止灰塵，濕氣和蒸汽進入•足夠的EMI屏蔽 我們將繼續解決電子外殼設計人員可能面臨的問題的“主旨”。那就是確定“蓋板”到外殼底盤的（最大）緊固件距離（“ C”）。這種類型的問題涉及外殼周圍的環境密封，這將提供密封作用（請參閱參考資料6）•防止灰塵，濕氣和蒸汽進入•足夠的EMI屏蔽 我們將繼續解決電子外殼設計人員可能面臨的問題的“主旨”。那就是確定“蓋板”到外殼底盤的（最大）緊固件距離（“ C”）。這種類型的問題涉及外殼周圍的環境密封，這將提供密封作用（請參閱參考資料6）•防止灰塵，濕氣和蒸汽進入•足夠的EMI屏蔽 \n 我們將在第一章中討論問題的屏蔽部分。9.現在，我們將解決設計基本密封設計幾何形狀方面的“結構性問題”，以保持足夠的強度以提供防潮密封。我將引用《 Tecknit EMI屏蔽產品手冊》中的某些材料（請參閱參考資料[3]）。請注意，這裡我使用的是“手冊”中的一些參考資料。即使在“ Google搜索”時代，這仍然是設計師寶貴的信息來源。這些手冊中有許多是精裝本，可以從原始設備製造商處獲得，以用於設計其特定組件。現在，許多“設計指南”信息都可以在線獲得（而不是精裝手冊中提供）。通常，組件製造商的銷售人員知道當今設計人員可以使用的各種“指南”和在線信息。現在，回到這個環境密封問題的結構考慮： \n A.封印材料：稍後在第1章中介紹。7，“產品環境（密封）” \n B.蓋板和底盤材料：此處涵蓋的彈性模量（稍後在第4章，“材料和工藝”中涵蓋了腐蝕。表面處理在第7章，“產品環境（密封）”中進行了說明” \n C.截面積（需要慣性矩），在此覆蓋 \n D.螺栓間距，在此覆蓋 \n E.壓縮擋塊，在此覆蓋 \n 在Tecknit手冊中，通過使用方程式（其中C是螺栓之間的間距）解決了（大約）“緊固件距離”問題。具有以下三個假設： \n 1.墊圈寬度=蓋板寬度。 \n 2.最大壓力（由墊圈施加）等於最小壓力（由墊圈施加）的三倍。 \n 3.最小壓力為20 psi。比較鋁製外殼（與鋼製外殼）： \n \xa0 \n Ct H= () \n \xa0 \n 適用於鋁板（E = 1×107 psi）。對於ΔH= 0.01英寸，墊片撓度是合理的，對於t = 0.125英寸，C = 4.0英寸 \n \xa0 \n Ct H= () \n \xa0 \n 對於鋼板（E = 3×107 psi）。當ΔH= 0.01英寸時，墊圈撓度適當，t = 0.125英寸，C = 5.2英寸。關於方程式（和答案）的其他一些觀察結果是： \n 1.我們看到，鋼製外殼的螺栓間距大於鋁製外殼的螺栓間距–這意味著較硬的材料可以減少撓曲。鋁板每4英寸需要一個螺栓，而如果我們使用鋼作為板材，則每5.2英寸需要一個螺栓。 \n 2.我們看到螺栓間距隨著厚度的三次方而變化–我們期望方程式（用於螺栓間距）可能基於“梁”的慣性矩，從而得出厚度的“立方體函數”。 \n 3.我們希望螺栓間距是“到1/4的功率”的函數，這是沿其長度具有均佈載荷的樑的撓曲的通用方程，該樑的撓度是到第四功率的長度的函數（請參見參考資料）。 [[2]）。對於具有均佈載荷的梁，相同的通用方程式也將具有撓度，它是其材料的彈性模量（E）隨1/4屈服而變化的（3¼= 1.3，即78.5 / 60）。因此，作為設計者，我們首先要估算4.0英寸的螺栓間距（對於鋁製外殼設計）。顯然，我們可以（並且應該）在設計中對此間距進行原型設計，並在盡可能真實的條件下進行測試。值得注意的是，我們還假設了墊片密封面積的橫截面，並且隨著墊片的變化，墊片的厚度也會發生變化： \n A.未壓縮狀態（在擰緊緊固件之前）。 \n B.壓縮狀態（在擰緊緊固件以在設計中設置“止動件”之後，即，緊固件附近的設計特徵明確限制了墊圈不會過度壓縮。所有墊圈都需要這些“止動件”以使緊固件能夠有指定的壓縮極限。我們還可以查看類似的設計，其中防護等級（空氣或水）與我們設計的設計相匹配。如果我們發現4.0英寸適用於這些設計，那將使我們充滿信心還應該注意的是，總體設計的一個因素是要使用最少數量的緊固件。因此，緊固件之間的5.0英寸距離將比4.0英寸的距離更好（這樣可以節省大量的時間）。緊固件和擰緊這些緊固件的工作）。但是，4。0英寸的間距將增加墊圈設計在額外載荷下的密封可能性，這些載荷不是計算的一部分（例如衝擊或熱），因此為設計提供了一定的安全餘量。 \n 3.4.2撓度公式和最大撓度（來自註塑雜誌） \n 另一種說明應力，撓度，慣性矩和麵積之間關係的問題由一種方法表示，該方法允許設計人員確定肋板與相同基礎厚度W（W）的無肋板相比的應力和撓度比。圖3.4）。這個問題將指出在設計中添加肋的重要性（並且容易！）。該肋將大大增加截面的強度。這樣的肋條很容易在註塑成型工藝，鑄造工藝甚至標準鈑金設計中添加。圖3.4顯示了兩個圖表。對於標有“應力比（肋骨/未肋骨）”的圖表，縱坐標是應力比，而橫坐標是肋骨高度/基部厚度。該圖顯示了將肋添加到平板時最大彎曲應力如何變化。每條曲線代表一個特定的肋骨間距比，標記為“ .01”的曲線代表間距很寬的肋骨，而其他曲線則具有更密集的肋骨間距。標記為“撓度比”的圖表與此類似，並顯示了標記為“ .01”的曲線，表示間距非常大的肋骨。參考中提供了更多詳細信息。[4]。程序 \n 1.計算等效基礎寬度，Beq = B / N，其中Beq等效基礎寬度= B =板總寬度N =肋骨總數 \n 2.計算肋骨尖端厚度，t = T-2H（tan a），其中t =尖端 \n 3 處的肋骨厚度。計算等效基礎截面的橫截面積，Ar = BeqW + H（（T + t）/ 2）其中：Ar =-等效基礎截面的橫截面積W =基部 \n 4的厚度。計算從極端光纖到中性軸的距離， \n Y = H + W –（3BeqW²+ 3Ht（H + 2W）+ H（T – t）（H + 3W））/ 6Ar \n 5。計算等效基礎段的慣性矩，Ir =（4BeqW³+ H³（3t + T）/ 12 – Ar（H – Y）²） \n 6.計算無肋的等效基礎段的慣性矩，Io = （BeqW³）/ 12 \n 7.計算肋板應力與無肋板應力之比，Sratio = 2（Io / Ir）（Y / W）。8 \n .計算肋板撓度與板肋撓度之比。無肋板，Yratio = Io / Ir因此，我們知道在“無肋”結構上增加肋骨將增加該結構處理更多載荷的能力。通常，可以通過在“常規”壁厚上增加厚度來增加強度，例如： \n \xa0 \n σ= Mc I / \n 其中：σ=考慮中的構件的應力M =該構件中的最大力矩（通常是力乘以“距離”的函數，即從力到構件截面的“距離”）I / c = Z，是所考慮截面的特性，也稱為截面模數c =從構件的中性軸到“外部纖維”的距離I =構件的慣性矩（大約質心）因此，增加量成員的承載能力，您可以：增加I和/或減少c（增加Z）。矩形的I（矩形是裝配構件的常見選擇）， \n Ibhc hre ca nd = = 3 12 2 /，/ \n 因此， \n Ic bhre c / / = 2 6 \n 其中b =矩形底邊的長度， h是矩形的厚度。 \n 注意，由於“平方函數”，增加厚度（h）具有很大的影響。因此，將厚度加倍實際上使光束強度提高了四倍。上面說過，將厚度增加一倍會使（“標準”橫截面的）構件重量增加兩倍。對於重量敏感型設計（在電子外殼行業中最普遍）而言，這可能是“災難”。但是，通過添加肋骨，肋骨是厚度的“間斷性”添加，強度顯著提高（而重量僅少量增加）。設計人員可能會驚訝地發現添加肋條實際上會增加最大應力。為什麼是這樣？儘管肋增加了板的整體慣性矩，對於短肋，從中性軸到橫截面（c）的極限纖維的距離可以更快地增加。對於間距較大的肋骨，此效果最為明顯。讓我們回到計算Sratio（無肋骨和單肋骨設計的最大允許應力比）的七個步驟，這是一個非常簡單的肋骨添加，其中“肋骨”不是錐形的，即T = t：板（B）= 1英寸單肋骨，肋骨高度（H）= 0.375基座厚度（W）= 0.125英寸Wr = 0.0.125 / 1.00 = 0.125肋骨高度/基座厚度= 0.375 / 0.125 = 3.0 BB eq英寸= = 100 tT = 0 125.i nch 讓我們回到計算Sratio（無肋骨和單肋骨設計的最大允許應力比）的七個步驟，這是一個非常簡單的肋骨添加，其中“肋骨”不是錐形的，即T = t：板（B）= 1英寸單肋骨，肋骨高度（H）= 0.375基座厚度（W）= 0.125英寸Wr = 0.0.125 / 1.00 = 0.125肋骨高度/基座厚度= 0.375 / 0.125 = 3.0 BB eq英寸= = 100 tT = 0 125.i nch 讓我們回到計算Sratio（無肋骨和單肋骨設計的最大允許應力比）的七個步驟，這是一個非常簡單的肋骨添加，其中“肋骨”不是錐形的，即T = t：板（B）= 1英寸單肋骨，肋骨高度（H）= 0.375基座厚度（W）= 0.125英寸Wr = 0.0.125 / 1.00 = 0.125肋骨高度/基座厚度= 0.375 / 0.125 = 3.0 BB eq英寸= = 100 tT = 0 125.i nch \n \xa0 \n Ar BWHTt = ++（）（）=×（）+×（）= eq在/ ...中 21 0 125 0 375 0 125 0 172 2 \n \xa0 \n \xa0 \n Y = +（）−（）+（）+（）（）= − = 0 375 0 125 0 047 0 053 0 035 1 032 05 0 131 .. ... / ... 0 0 369 0 0078 0 026 12 0 172 0 375 0 369 0 00282 2 .. .. / ...）。in Ir = +（）-（）=--= 0 00001 0 0028 4 .. in \n \xa0 \n Io = 0 \n 00016 4 .in Sratio =（）（）=（）（）= 20 00016 0 0028 0 365 0 125 20057 2920 33./ .. /。... \n \xa0 \n 因此，在設計中增加了肋條，使斷面強度提高了約三倍。《注射成型雜誌》（參考文獻7）文章還比較了帶肋/無肋截面的撓度比。 \n \xa0 \n 3.4.3另一個撓曲問題，這一次是扣合鉤（摘自Mobay設計手冊，塑料扣合接頭） \n 這個問題是機箱設計人員在設計常用功能時所面對的一個很好的例子，即“扣合” 。” 卡扣接頭是連接兩個不同組件的非常簡單，經濟且快速的方法。由於這消除了將兩個部件連接在一起的緊固件，因此非常頻繁地使用它。該設計利用了其中一個零件（“鉤”）的突出特徵，而另一零件則包含孔（或“底切”）。這裡的想法是，鉤在連接操作過程中短暫偏轉，並卡入底切以完成配合操作。選擇了以下介紹性問題： \n A.顯示了一種通用的緊固方法（用於塑料）。 \n B.顯示出使用材料的共同強度的公式以利用材料的彈性特性的方式使用，撓曲在設計中用作優點，並且使橫截面積和均勻應變最優化。 \n C.介紹了使用塑料材料進行設計的某些方面。 \n D.利用供應商提供的文獻資料（在本例中為Mobay Plastics）。代替通過第一原理來解決一些更複雜（至今）的問題，列表選項和列線圖的使用可以大大減少所需的設計時間。該計算示例針對的是矩形橫截面的卡扣式掛鉤，其厚度從掛鉤的根部的h逐漸減小到掛鉤的末端的h / 2（見圖3.5）。因此，這是設計類型2（請參見參考表）。總體設計目標是用最少的材料實現最大的變形。給定：材料=聚碳酸酯 \n 長度（l）= 0.75英寸寬度（b）= 0.37英寸底切（y）= 0.094英寸傾角（α）= 30°發現：厚度（h），在該厚度下，全撓度（y）會引起應變的½。允許的應變。從表中（對於聚碳酸酯），ε（允許）= 4％；因此，ε（允許）＝ 2％。從表（類型2設計） \n yl h ==××= 10 91 09 0020 75 0 094 013 22 ./.../ ..ε英寸 \n 撓曲力（P）從表（力方程式） \n \xa0 \n PbhE l =（）（ ）²// 6ε \n \xa0 \n 從聚碳酸酯（ε= 2％）的圖中，E = 264,000 psi \n \xa0 \n Pl b =×（）××（）= 03 70 13 6 264000 002037 29 .. /。/。..†， \n \xa0 \n 配合力（W） \n \xa0 \n WP = +（）−（）µα µα tan / tan 1 \n \xa0 \n 表中的摩擦係數（PC對PC）μ= 0.50。1.2 = 0.6。從圖中可以看出，對於μ= 0.6和α= 30°W =×= 29 1754 3 ..（μ+ tanα）/（1-μtanα）= 1.75 \n \xa0 \n 3.5動態載荷 \n 電子機櫃中構件的動態載荷是由於載荷以非穩態方式承受在構件上的。它們包括但不限於： \n A.具有振幅和頻率的振動載荷（包括與地震地面運動相關的風力或慣性力） \n B.離散衝擊載荷在這些振動和衝擊載荷情況下，將探討一些問題。小伙子 關於“產品環境”的第7條。 \n 本章小結在本章中，我向EPE設計器介紹了外殼結構方面的一些基本注意事項。我們可以通過為這些外部船體提供材料來開始這種設計。同樣，我們的設計處置將是選擇船體的橫截面。這些橫截面和材料的最佳選擇是利用易於獲得的材料方程式的強度來進行的。但是，在各種解決方案中都需要做出選擇，並且要確定最佳設計，不僅要單獨考慮結構，還需要更多考慮。此外，我們還介紹了一種用於設計電子外殼結構的通用過程。首先要看先前的設計，確定結構上的力，然後繼續確定設計中的安全因素。從那裡，我們看了一些示例，這些示例說明了結構設計中的常見問題。我們以一小節結束了關於其他復雜性和需要注意的方面，這是對Chap的介紹。4。 \n 參考文獻 \n 本章再次回顧了結構方面的考慮，因為它們與電子外殼設計中遇到的結構有關。讀者可能還有許多其他信息來源，但多年來（多年來）我一直使用以下主要信息來源： \n \xa0 \n \n Roark RJ，Young WC（1975）應力和應變公式。紐約麥格勞-希爾 \n \n 出版社。 \n \n Byars EF，Snyder RD（1969）可變形體的工程力學。International Textbook Co.，Scranton \n \n 3.有關EMI屏蔽材料的選擇和應用的設計指南。TECKNIT，《 EMI屏蔽產品》（1991年）。 \n 4.《注塑成型》雜誌，1998年5月，陶氏材料工程中心的R. Cramer', 'tags': '', 'url': 'week6.html'}, {'title': 'week7', 'text': '\n', 'tags': '', 'url': 'week7.html'}, {'title': 'week8', 'text': '\n', 'tags': '', 'url': 'week8.html'}, {'title': 'week9', 'text': '', 'tags': '', 'url': 'week9.html'}, {'title': 'week11-12', 'text': 'VirtualBox \n 以下的工作我重複做了好幾遍，但最後都以失敗坐收。 \n Setting VirtualBox Network \n 在VirtualBox→Files→Preferences →Network 新增一個網路設定，支援DHCP和IPV6 \n IP 查詢 \n \n \n \n \n \n \n 1 \n \n \n \n ifconfig \n \n \n \n \n \n \n \n 若跳出尚未安裝net-tools的話請安裝 \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt install net-tools \n \n \n \n \n \n \n \n 若在 IPv6 環境下有跳出網路錯誤 \n \n IPv6環境設定是否正確 請到 /etc/netplan 目錄下檢查 00-installer-config.yaml 檔案內的設定 \n \n \n \n \n \n \n 1 \n 2 \n \n \n \n cd /etc/netplan \n sudo vi 00-installer-config.yaml \n \n \n \n \n \n \n \n 00-installer-config.yaml \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n \n \n \n # This is the network config written by \'subiquity\' \n network: \n \xa0\xa0\xa0\xa0 ethernets: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 enpes3: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 dhcp4: true \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 dhcp6: true \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 nameservers: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 addresses: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 - 2001:b000:168::1 \n \xa0\xa0\xa0\xa0 version: 2 \n \n \n \n \n \n \n \n 編輯完成後:wq跳出編輯並儲存，並更新netplan設定 \n \n \n \n \n \n \n 1 \n \n \n \n sudo netplan apply \n \n \n \n \n \n \n \n \n \n proxy問題 請到 /etc/apt/apt.conf.d 目錄下檢查是否有proxy.conf檔案，若沒有，請用新增(直接用vi編輯器開啟proxy.conf就會自動新增) \n \n \n \n \n \n \n 1 \n 2 \n \n \n \n cd /etc/apt/apt.conf.d \n sudo vi proxy.conf \n \n \n \n \n \n \n \n proxy.conf的檔案內容 \n \n \n \n \n \n \n 1 \n \n \n \n Acquire::http::proxy "http://[2001:288:6004:17::填port號]:3128"; \n \n \n \n \n \n \n \n 先增完內容後要更新apt \n \n \n \n \n \n \n 1 \n \n \n \n sudo apt update \n \n \n \n \n \n \n \n \n \n 網路設定完成後可以啟動wsgi.py \n 再用電腦上的網頁(不是虛擬主機的網頁)到\xa0 https://localhost:8443/看是否成功連上，如果成功連上後就換putty \n', 'tags': '', 'url': 'week11-12.html'}, {'title': 'week13-14', 'text': 'CoppeliaSim學習 \n 首先簡略瀏覽關於coppeliaSim用戶手冊中所負責的部分區域檢視，大略看過標題及裡面分支出來的內容後，針對使用介面之解說有做進一步了解，甚至有做出特定使用者介面使少數特定族群受惠，對於視圖與位置操作方向也詳細說明並加入快捷鍵使用方式以及命令行的詳細解說。 \n 僅看第一個標題的內容就發現到以上幾個需要特別注意的重點，剩餘兩個標題所表達之內容便偏向於外部環境設定與模組方面的專業知識，藉由圖例所輔助說明能較為知道手冊所想表達的意涵，也能修正對於單單只看文字而想像出操作步驟與有附真實圖例比較之下的差異性，並導正之間所產生的誤會，也可以從而對內容加深印象。 \n 雖然負責的部分只有三個標題的內容，不過卻蘊含這麼多需要注意的細節，也覺得不管是哪個部分都很重要，未來也會和隊友相互交流知道的資訊，以能平衡之間未能負責的區域內容。 \n 以下為所負責之項目內容 \n 1 -使用者介面(包含快捷鍵、視圖與頁面、命令列、操作方向與位置) \n 2 -場景與模組 \n 3 -環境設定、操作', 'tags': '', 'url': 'week13-14.html'}, {'title': 'week15', 'text': '我這周剛拿到畫圖組的完成品，但已經開始使用CoppeliaSim將其組裝 \n \n \n \n \n 增加物理條件: \n 先雙擊點選左側要的物件 \n \n 點完後會出現此視窗並點擊show dynamic propertices dialog \n \n 進入後把body is respondable和body is dinamic勾選 \n \n', 'tags': '', 'url': 'week15.html'}, {'title': 'week16', 'text': '這周主要是在用分組coppeliasim \n \n 先在左側按右健 - add - joint - revolute新增四個joint \n \n 將四個joint分別對應到四個輪軸位置，利用joint使車輪和本體連結並做傳動 \n \n \n \n \n \n', 'tags': '', 'url': 'week16.html'}, {'title': 'week17', 'text': '在我把車子的各個零件於CoppliaSim裡組合完成後，我啟動並發現個零件於做動時會閃架。 \n \n 後來經過查詢和詢問後發現組裝完成的是屬於skin的部分，所以需要畫出實體在把skin套上才有辦法正常做動。 \n \n \n', 'tags': '', 'url': 'week17.html'}, {'title': 'MechanicalDesignProcess', 'text': '', 'tags': '', 'url': 'MechanicalDesignProcess.html'}, {'title': 'part3', 'text': '我們的設計都將從產品的想法開始。這些想法需要被驗證 , 因此 , 我們將著手構建原型 , 如果這些原型通過書面規範 , 我們將通過圖紙記錄我們的設計。我們需要此文檔才能以可重複的方式構建更多產品。本章將讓我們從僅僅對產品的想法出發 , 一直到以最佳方式構成所有單個物件的最終設計。我們從 " 空白紙 " 開始設計 , 那張紙將充滿物理性質。第一個令人關切的項目是確定紙張是否確實為 " 空白 " 或是否存在一些限制。下一個值得關注的項目是確定要包括哪些物理性質。然後 , 我們應該假設這些性質是基於整體設計目標的最佳配置 , 因此 , 我們將以一些詞語來總結我們對該物件配置的選擇。 \n \xa0 \n 2.1 起點 \n 設計師的任務是繼續對現有設計進行強化 , 或者開始全新的設計。讓我們花一點時間看看這些起點的區別是什麼。 \n \n 全新的設計 : 「清潔圖紙」是對設計師的開始 ; 除了遵守規範之外 , 它們基本上沒有任何限制。我們將有一整節關於規範的確切內容及其各種元件。 \n 延續 ( 或添加 ) 現有設計 : 這是全新設計的變體 , 但只能修改現有設計的一小部分。這裏的設計師對全新的設計有許多相同的挑戰 , 但額外的工作必須利用現有的設計。我們將有一個單獨的章節來定義 " 系統 " 在此背景下的確切內容。 \n 對現有的設計進行重大修改 : 同樣 , 這是全新設計的變體 , 但在這種情況下 , 將修改原始設計的很大一部分。這裏的設計師的任務是改變整體設計的一部分 , 因此比全新的設計有更多的約束。 \n \n 因此，重要的是要知道當前的設計工作將適合先前所做的工作。我們的“基本佈局”可以在有或沒有工作約束的情況下進行。 \n 2.2 定義設計邊界 : 系統描述 \n 定義正在設計的 " 系統 " 的幾句話 : 設計可能極其複雜和龐大 ( 如航天飛機或大型客機 ) 、更小的系統 ( 想想汽車 ), 或者更小的系統 , 如個人電腦、咖啡機或手機。所有這些設計項目的範圍，成本，時間，承諾的資源數量以及與其他設備的接口都不同。設計人員必須牢記正在設計的系統。這一點很重要 , 原因有很多 , 其中幾個原因包括 : \n \n 專注於個人責任 ( 工作範圍 ) \n 了解與該設計交互的其他設備 \n 整體 " 系統 " 功能 ( 而不僅僅是子系統的功能 ) \n \n 甚至像手機這樣“小”的東西也可以作為大系統的一部分。即，消費者購買的組合可以包含： \n \n 手機 \n 電池充電器 \n 電纜 \n  Sim  卡 \n 說明書 \n 其他運輸材料 ( 標籤、袋子、氣泡包裝 )( 我們將限制此處對 " 系統 " 的討論 , 因為您甚至可以想到一個更大的系統 , 包括手機塔和衛星系統 ) 。我們從系統描述開始 , 因為大多數電子外殼都環繞和支援產品。有時 , 可以將一種產品視為較大產品的一部分。例如 , 網路適配器卡 ( 產品本身 ) 可以放入微電腦 ( 第二個產品 ), 並形成全新的產品 , 在此示例中 , 一個可聯網的微電腦。隨著可聯網的微電腦本身構成網路的一部分 , 情況變得更加複雜 , 而網路可能是更大的產品。從另一種方式來看 , 我們可能的任務是只設計一個更大系統的子系統。因此 , 我們的 " 系統 " 可能甚至不是產品 , 而僅僅是一個更大的 " 系統 " 的一部分 , 該系統已被分解為 ( 時間 ) 可管理的部分。 \n \n 圖 2.1 系統說明 \n 例如，我們的任務是設計一個數據記錄器，作為測量系統的一部分。該系統如圖 2.1 所示。該系統至少由三個主要子系統組成： \n \n 數據記錄器 \n 數據記錄器安裝支架 \n 測量桿（標記為“桿”），其中包括另一個子系統，即數據記錄器支架，實際上“系統”包括電纜、運輸容器（盒）和說明手冊（但在此示例中，我們將其忽略）。附帶說明一下，圖 2.1 中的系統是 Trimble Survey 系統的照片，該系統出現在華盛頓特區的史密森尼博物館中。我們已成為“測量員系統設計組”的團隊成員，並將設計一部分總體設計（數據記錄器部分）。因此，我們的首要任務是確定（指定）我們到底要設計什麼（在給定的時間內圍繞我們負責的項目建立“圍欄”之類的東西）。要完成此任務，我們將需要一個規範。（請參考第 1 章有關規範的討論。） \n \n 2.3設計過程 \n 2.3.1總體項目開始到項目完成 \n 設計可以以多種方式進行。所有公司在執行整個產品設計過程的方式上都有差異，但是它們確實具有一些共同的特徵。沒有什麼特別的方法是絕對正確的。最終結果（符合規範）是衡量成功的標準。設計通常按以下步驟進行： EPE 設計人員將承擔以下任務的“絕大部分”。他們將是許多工作的“執行者”和“推動者”。如果他們自己不做這項工作，那麼他們肯定得對這項工作負責。 \n 1.構思草圖–這是項目的“理想”階段。單詞必須變成這些圖片來表示。一旦想法採用某種形式，就可以輕鬆地對其進行審查和修訂。審核小組中的某些人需要對構想有“了解”才能真正看到所提出的內容。 \n 2.審查想法並授權進行原型製作 - 此操作將“想法圖片”轉化為團隊可以實際接觸的東西。現在可以以客戶使用產品的方式來拾取，保存和使用草圖形式中看起來不錯的產品；原型是一張完整的三維圖片。“進行授權”很重要，因為這些項目通常在時間和金錢上受到限制，因此這些支出必須由團隊同意。步驟 3 和 4 （如下）實際創建出原型。 \n 3.原型製作的想法圖（文件創建）–通常，將草圖轉換為數字化的圖文件，從而可以進行設計。（設計現在位於修訂版 1 。）包含斜體字，以表示正式文檔的“修訂級別”，第 12 章中對此進行了進一步擴展。 \n 4.原型製造（物理零件）–項目團隊將確定製造原型的成本和時間限制。有時候，只需要一個“快速而粗糙的”原型即可取得良好的進展。有時需要按照嚴格的規格來構造原型。 EPE 設計人員應該對開發階段需要什麼有很好的認識。 \n 5.原型分析和測試–團隊收到原型後，將對其進行測試以查看原型是否符合規範。項目團隊僅需要確定進行哪些測試，以決定測試之後如何進行。 \n 6.審查原型和測試結果–測試結果由團隊審查，並提出修訂建議。（假設版本 1 需要改進，我們將設計修訂為版本 2 。） \n 7.進行更改以改進原型（圖紙和原型）–這是迭代過程的開始，最終將使設計符合產品規格。 \n 8.對版本 2 的進一步分析和測試（假設版本 2 符合產品規格。） \n 9.產生最終文件 / 最終測試 / 最終審查 \n 10.正式批准生產發布的設計 \n \xa0 \n 請注意，上述過程中的“生產下達”允許生產“一定數量”的單元是生產並出售給客戶，或用作更多單元以用於更廣泛的測試程序。公司在為客戶發布和測試產品的過程上可以有多種方式的差異。另請注意，大多數項目的修訂版將比所示的兩個修訂版多很多，但是該項目通常會如所示進行。 \n 2.3.2 EPE設計器的開始注意事項 \n 沒有任何“絕對正確”的方式可以進行 EPE 設計器的設計。每種情況都有其獨特的最佳方法，以使可見的所需進度成為可能。有時，幾天之內就可以放在一起的原型可以為市場帶來令人難以置信的新產品突破。在其他情況下，最好的方法是採用系統的方法來提出一些可能的解決方案，而這些解決方案需要花費數月的時間才能完成。話雖如此，以下概述至少應該作為起點並對設計有用。 \n 1.確定與負載不直接相關的解決方案用途和要求。這些要求中一些更重要的是： \n （ a ）環境–產品將在哪裡使用？例如辦公室 / 室外 / 高空 / 車輛上。 \n （ b ）溫度–環境的極端溫度是多少？ \n （ c ）預期壽命–一次使用，多年保修，服務？ \n （ d ）成本要求–始終是重要的考慮因素。絕對將取決於生產的單元數量和工裝預算。 \n （ e ）加工要求–外觀細節可能會大大影響成本。 \n （ f ）尺寸和重量限制–當前行業解決方案的局限性是什麼？影響設計師選擇的材料 / 製造技術。 \n （ g ）安全和法規要求–產品故障的影響是什麼？以上所有這些都是 EPE 設計器設計之初要考慮的重要考慮因素。例如，室內與室外環境會產生不同的設計。與預期使用“一次”的設計相比，需要經過 1000 次使用後的設計產生了不同的設計。成本低於 5 美元的設計與成本低於 100 美元的設計產生了不同的設計。通過遍歷以上每個元素， EPE 設計人員可以確定一些初始約束。 \n 2.根據可能需要單個構件（和組件）承受的所有各種可能類型的載荷來確定或估算工作載荷。有必要考慮所有可能的載荷組合，並在可能的情況下確定載荷與時間之間的關係。一些可能的載荷類型為： \n （ a ）靜態 \n （ b ）穩態動態（振動） \n （ c ）瞬態動態 \n （ d ）衝擊或撞擊 \n （ e ）身體接觸，例如點載荷或摩擦力 \n （ f ）其他載荷，例如熱 / 重力 / 聲學載荷上述載荷確定對於 EPE 設計者的設計也是非常重要的考慮因素。例如， 10 磅靜態負載與 100 磅靜態負載產生了不同的設計。如果這些負載隨時間變化，這將導致不同的設計解決方案。確定負載的大小和類型將直接確定支撐電氣組件所需的材料和橫截面形狀。 \n 3.確定故障機制。變形是由於軸向，剪切，彎曲或扭轉載荷而發生的。可能的失效模式為： \n （ a ）總體屈服（整體非彈性行為） \n （ b ）破裂或斷裂 \n （ c ）突然–由脆性材料上的靜態或動態載荷引起 \n （ d ）緩慢–由延性材料上的靜態載荷引起 \n （ e ）漸進式–由反复的載荷引起（疲勞） \n （ f ）過度變形 \n （ g ）屈曲 \n （ h ）蠕變–在恆定應力下變形 \n （ i ）鬆弛–在恆定應變下改變應力 \n （ j ）磨損（磨損） \n （ k ）腐蝕 \n EPE設計人員確定他們的設計將如何失敗（在當前設計狀態下），有可能修改該設計以防止失敗。測試還將揭示一些故障機制。然而，如果在測試之前可以考慮其中一些故障機制，則可以節省很多開發成本。總結以上三項，通過確定設計的用例，負載和潛在的故障機制， EPE 設計人員可以在紮實的基礎上進行設計。 \n 2.4 最佳物件放置 \n 大多數設計都可以認為是物體在空間的物理放置。對像是整個程式集的單獨部分。某些單獨的部件是完全已知的 ( 它們要麼從另一家公司的貨架上購買 , 要麼重複使用以前在內部設計的部件 ) 。除了 " 已知 " 零件外 , 其他部件還需要全新設計。這些新部件可在內部生產 , 也可以完全指定由另一家公司生產。電子包裝設計主要包括將子系統安排到最有效的排列中。決定這種安排的第一步是查看子系統的單獨卷。這些卷 , 以及它們之間清除所需的 " 間隙 ", 通常會設置 " 外部邊界 ", 因此 , 在很大程度上設置產品的總體尺寸。有時 , 設計人員首先採用的標準是產品的整體尺寸。從這裏 , 他們必須決定它們能否在給定的總體大小內容納所有要求的內容。也就是說 , 我們的子系統可能確實需要收縮以適應這個給定的總體規模。基本設計過程的一個方面如圖 2.2 所示。這顯示了一個物體 ( 在太空中 ) 與外殼 ( 顯示為 " 牆 ") 的距離。我想開始討論電子外殼的設計 , 描述幾個設計 " 場景 " 。討論的大部分內容都是針對  2D( 平面視圖 , 從上面 ) 的情況 , 但很容易擴展為包括  3D( 側視圖或  Z  方向 ), 我將展示第三視圖的一些示例 : 基本物件 / 牆間隙 : 圖  2.2  顯示了物件和牆。 " 物件 " 可以被視為任何內容。例如 , 它可以是印刷電路板元件、汽車發動機或任何電子元件。 " 牆 " 可視為表面外的外殼或所設計物品的外部。在幾乎每一個設計中 , 設計師都必須確定 " 物件 " 和 " 牆 " 之間的距離 ( 間隙 ) 。這裡的想法可以擴展到確定物件  1  和物件  2  之間的距離。這些確定的間隙都不需要彼此相同。 X  方向中的間隙可能不同於  Y  方向中的間隙 , 後者也可能與  Z  方向中的間隙不同。 \n 2.4.1間隙距離 \n \xa0 \n 1.物體和牆壁的公差：如果要保持特定的距離（例如，假設為 0.100 英寸）和標稱的整體（外部）尺寸，則設計必須考慮以下因素：•最厚的牆壁在其極限處公差•最大可能的物體（在物體公差的最高極限處）請注意，最厚的壁和最大的物體都減小了 0.100 英寸的標稱間隙距離。（還請注意，最薄的壁和最小的物體都可以增加 0.100 英寸的標稱間隙距離。）•必須考慮將物體固定在盒子上。也就是說，緊固系統將允許物體在多大程度上靠近牆壁？假設對像上有一個簡單的安裝孔，盒子上有一個螺紋凸台。物體上的孔（比）要大一些（用於將物體固定到盒子的螺紋凸台中的螺釘）。因此，如果緊固件位於通孔的一側邊緣，則物體可能會更靠近牆壁。還必須考慮盒形螺紋凸台位置的位置公差（相對於盒壁），因為凸台實際上可能更靠近壁（由於製造公差）。通常，可以忽略此“緊固公差”，但某些間隙在有限的緊湊空間設計中，這可能很關鍵。因此，對於到目前為止的間隙示例，僅考慮公差，我們可以具有以下公差：•壁厚可以厚 0.005 英寸。（在“受限”的整體尺寸下，所有這些都會增加盒子內部的壁厚）。•物體本身（將孔安裝到物體邊緣）可能處於最大位置公差；這可能是 0.010 英寸。 \n \n 由於其位置公差，盒子中的安裝凸台可能更靠近牆壁。這可能是 0.005 英寸。•安裝孔可能比（最小）緊固件直徑大 0.010 英寸，從而允許額外移動 0.005 英寸。以上所有（ 4 ）公差都加到 0.005 + 0.010 + 0.005 + 0.005 ，總計為 0.025 英寸。\n', 'tags': '', 'url': 'part3.html'}, {'title': 'part4', 'text': '3.4結構問題：靜載荷 \n 同樣，由於本文並不打算涵蓋所遇到的所有各種結構性考慮事項或問題，因此我想強調一些突出以下內容的問題（我將其保留為三個）：•可以認為是以下兩個問題之一“個體”是指將載荷和力施加到要設計的單個構件或“整體結構”上，也就是說，可以是對整個（組裝）結構的分析。•許多單個零件（或子裝配體）的供應商會在自己的文獻中提供設計指南，這些指南肯定可供單個設計師使用。這些信息大部分基於多年來獲得的經驗和分析經驗。告誡設計人員了解任何這些信息的背景和限制。以圖形或表格格式顯示的某些信息植根於基本原理，但這可能並不明顯。這種可用的“供應商數據”類型的一些示例是塑料，密封件，EMI組件和軸承（僅舉幾例）的設計。 \n 電子外殼中 \n 的構件上的靜態載荷是由於：1.構件自身的重量 \n 2.其他構件施加的載荷 \n 3.由於熱效應，殘餘應力等引起的載荷。靜態載荷會導致構件受力而導致失效： \n 1.超出材料的屈服強度。 \n 2.構件的過度撓曲，導致構件的性能超出設計意圖。由於所有載荷都會產生一定的撓度，因此必須在設計中的某個時刻知道允許構件產生多少撓度。靜態載荷下的斷裂破壞在韌性材料中不如在脆性材料中常見。在延性構件中，失效通常是由於過度的非彈性作用而導致的，該過度的彈性作用導致在斷裂之前很長的整體變形。動態加載將在Sect中介紹。3.5。動態負載通常是隨時間變化的負載，而靜態負載在相對較短的時間內不會發生顯著變化。電子外殼設計中常見的一些動態載荷是重複載荷，衝擊載荷和能量載荷。能量負荷是指在撞擊期間傳輸的能量（比作用力）更容易表達的負荷。重複載荷造成的斷裂通常稱為“疲勞”故障。振動可能會導致疲勞失效。以下三個問題通常涵蓋的主題是： \n 1.什麼是光束（相對於平板）？ \n 2.應力公式和最大應力。 \n 3.撓度公式和最大撓度。4.截面模量。 \n 5.彈性模量。6.結束條件。7.負載條件。8.最壞的情況下加載。9.組合加載。 \n 3.4.1懸臂梁分析（來自Tecknit EMI屏蔽產品手冊） \n 大多數電子外殼應力分析都可以通過計算“簡單”梁來表徵。但是，首先讓我們定義一個光束。Roark和Young（請參閱參考資料[1]）對樑的撓曲公式的應用進行以下假設：•樑的長度必須與其深度成比例，對於金屬梁，跨度/深度比應為8或更大，而15為15或更多用於具有相對薄腹板的梁。Byars和Snyder（參見參考文獻[2]）是一個很好的例子，如圖3.3所示。確定法蘭正下方的A點處的主要法向應力和剪應力。假定彈性行為，並忽略壁上的任何應力集中。解決方案：梁左端的彎矩為： \n \xa0 \xa0 \n \n （當考慮問題中的彎曲應力和剪切應力時，使用莫爾圓來求總應力。）但是，請注意，在這樣短的構件中，其橫截面薄（跨度/深度比= 24/15） = 1.7），則撓曲公式的有效性值得懷疑。請注意，例如，剪應力和法向應力的數量級相同。另外，請注意，要應用正確的跨度/深度比，此樑的長度必須在19英尺的數量級上。以上示例的重要性在於強調了橫向剪應力對最大應力的影響。確定樑的最大應力時，除非用盡所有可能產生最大主應力的彎曲應力和剪切應力組合，否則對結果不滿意。經常，剪切和彎矩圖的構建以及彎曲應力和橫向剪切應力的數量級比較將大大簡化問題。使用上面示例中的一些梁應力公式，我們將繼續解決電子外殼設計人員可能面臨的問題的“主推力”。那就是確定“蓋板”到外殼底盤的（最大）緊固件距離（“ C”）。這種類型的問題涉及外殼周圍的環境密封，這將提供密封作用（請參閱參考資料6）•防止灰塵，濕氣和蒸汽進入•足夠的EMI屏蔽 我們將繼續解決電子外殼設計人員可能面臨的問題的“主旨”。那就是確定“蓋板”到外殼底盤的（最大）緊固件距離（“ C”）。這種類型的問題涉及外殼周圍的環境密封，這將提供密封作用（請參閱參考資料6）•防止灰塵，濕氣和蒸汽進入•足夠的EMI屏蔽 我們將繼續解決電子外殼設計人員可能面臨的問題的“主旨”。那就是確定“蓋板”到外殼底盤的（最大）緊固件距離（“ C”）。這種類型的問題涉及外殼周圍的環境密封，這將提供密封作用（請參閱參考資料6）•防止灰塵，濕氣和蒸汽進入•足夠的EMI屏蔽 \n 我們將在第一章中討論問題的屏蔽部分。9.現在，我們將解決設計基本密封設計幾何形狀方面的“結構性問題”，以保持足夠的強度以提供防潮密封。我將引用《 Tecknit EMI屏蔽產品手冊》中的某些材料（請參閱參考資料[3]）。請注意，這裡我使用的是“手冊”中的一些參考資料。即使在“ Google搜索”時代，這仍然是設計師寶貴的信息來源。這些手冊中有許多是精裝本，可以從原始設備製造商處獲得，以用於設計其特定組件。現在，許多“設計指南”信息都可以在線獲得（而不是精裝手冊中提供）。通常，組件製造商的銷售人員知道當今設計人員可以使用的各種“指南”和在線信息。現在，回到這個環境密封問題的結構考慮： \n A.封印材料：稍後在第1章中介紹。7，“產品環境（密封）” \n B.蓋板和底盤材料：此處涵蓋的彈性模量（稍後在第4章，“材料和工藝”中涵蓋了腐蝕。表面處理在第7章，“產品環境（密封）”中進行了說明” \n C.截面積（需要慣性矩），在此覆蓋 \n D.螺栓間距，在此覆蓋 \n E.壓縮擋塊，在此覆蓋 \n 在Tecknit手冊中，通過使用方程式（其中C是螺栓之間的間距）解決了（大約）“緊固件距離”問題。具有以下三個假設： \n 1.墊圈寬度=蓋板寬度。 \n 2.最大壓力（由墊圈施加）等於最小壓力（由墊圈施加）的三倍。 \n 3.最小壓力為20 psi。比較鋁製外殼（與鋼製外殼）： \n \xa0 \n Ct H= () \n \xa0 \n 適用於鋁板（E = 1×107 psi）。對於ΔH= 0.01英寸，墊片撓度是合理的，對於t = 0.125英寸，C = 4.0英寸 \n \xa0 \n Ct H= () \n \xa0 \n 對於鋼板（E = 3×107 psi）。當ΔH= 0.01英寸時，墊圈撓度適當，t = 0.125英寸，C = 5.2英寸。關於方程式（和答案）的其他一些觀察結果是： \n 1.我們看到，鋼製外殼的螺栓間距大於鋁製外殼的螺栓間距–這意味著較硬的材料可以減少撓曲。鋁板每4英寸需要一個螺栓，而如果我們使用鋼作為板材，則每5.2英寸需要一個螺栓。 \n 2.我們看到螺栓間距隨著厚度的三次方而變化–我們期望方程式（用於螺栓間距）可能基於“梁”的慣性矩，從而得出厚度的“立方體函數”。 \n 3.我們希望螺栓間距是“到1/4的功率”的函數，這是沿其長度具有均佈載荷的樑的撓曲的通用方程，該樑的撓度是到第四功率的長度的函數（請參見參考資料）。 [[2]）。對於具有均佈載荷的梁，相同的通用方程式也將具有撓度，它是其材料的彈性模量（E）隨1/4屈服而變化的（3¼= 1.3，即78.5 / 60）。因此，作為設計者，我們首先要估算4.0英寸的螺栓間距（對於鋁製外殼設計）。顯然，我們可以（並且應該）在設計中對此間距進行原型設計，並在盡可能真實的條件下進行測試。值得注意的是，我們還假設了墊片密封面積的橫截面，並且隨著墊片的變化，墊片的厚度也會發生變化： \n A.未壓縮狀態（在擰緊緊固件之前）。 \n B.壓縮狀態（在擰緊緊固件以在設計中設置“止動件”之後，即，緊固件附近的設計特徵明確限制了墊圈不會過度壓縮。所有墊圈都需要這些“止動件”以使緊固件能夠有指定的壓縮極限。我們還可以查看類似的設計，其中防護等級（空氣或水）與我們設計的設計相匹配。如果我們發現4.0英寸適用於這些設計，那將使我們充滿信心還應該注意的是，總體設計的一個因素是要使用最少數量的緊固件。因此，緊固件之間的5.0英寸距離將比4.0英寸的距離更好（這樣可以節省大量的時間）。緊固件和擰緊這些緊固件的工作）。但是，4。0英寸的間距將增加墊圈設計在額外載荷下的密封可能性，這些載荷不是計算的一部分（例如衝擊或熱），因此為設計提供了一定的安全餘量。 \n 3.4.2撓度公式和最大撓度（來自註塑雜誌） \n 另一種說明應力，撓度，慣性矩和麵積之間關係的問題由一種方法表示，該方法允許設計人員確定肋板與相同基礎厚度W（W）的無肋板相比的應力和撓度比。圖3.4）。這個問題將指出在設計中添加肋的重要性（並且容易！）。該肋將大大增加截面的強度。這樣的肋條很容易在註塑成型工藝，鑄造工藝甚至標準鈑金設計中添加。圖3.4顯示了兩個圖表。對於標有“應力比（肋骨/未肋骨）”的圖表，縱坐標是應力比，而橫坐標是肋骨高度/基部厚度。該圖顯示了將肋添加到平板時最大彎曲應力如何變化。每條曲線代表一個特定的肋骨間距比，標記為“ .01”的曲線代表間距很寬的肋骨，而其他曲線則具有更密集的肋骨間距。標記為“撓度比”的圖表與此類似，並顯示了標記為“ .01”的曲線，表示間距非常大的肋骨。參考中提供了更多詳細信息。[4]。程序 \n 1.計算等效基礎寬度，Beq = B / N，其中Beq等效基礎寬度= B =板總寬度N =肋骨總數 \n 2.計算肋骨尖端厚度，t = T-2H（tan a），其中t =尖端 \n 3 處的肋骨厚度。計算等效基礎截面的橫截面積，Ar = BeqW + H（（T + t）/ 2）其中：Ar =-等效基礎截面的橫截面積W =基部 \n 4的厚度。計算從極端光纖到中性軸的距離， \n Y = H + W –（3BeqW²+ 3Ht（H + 2W）+ H（T – t）（H + 3W））/ 6Ar \n 5。計算等效基礎段的慣性矩，Ir =（4BeqW³+ H³（3t + T）/ 12 – Ar（H – Y）²） \n 6.計算無肋的等效基礎段的慣性矩，Io = （BeqW³）/ 12 \n 7.計算肋板應力與無肋板應力之比，Sratio = 2（Io / Ir）（Y / W）。8 \n .計算肋板撓度與板肋撓度之比。無肋板，Yratio = Io / Ir因此，我們知道在“無肋”結構上增加肋骨將增加該結構處理更多載荷的能力。通常，可以通過在“常規”壁厚上增加厚度來增加強度，例如： \n \xa0 \n σ= Mc I / \n 其中：σ=考慮中的構件的應力M =該構件中的最大力矩（通常是力乘以“距離”的函數，即從力到構件截面的“距離”）I / c = Z，是所考慮截面的特性，也稱為截面模數c =從構件的中性軸到“外部纖維”的距離I =構件的慣性矩（大約質心）因此，增加量成員的承載能力，您可以：增加I和/或減少c（增加Z）。矩形的I（矩形是裝配構件的常見選擇）， \n Ibhc hre ca nd = = 3 12 2 /，/ \n 因此， \n Ic bhre c / / = 2 6 \n 其中b =矩形底邊的長度， h是矩形的厚度。 \n 注意，由於“平方函數”，增加厚度（h）具有很大的影響。因此，將厚度加倍實際上使光束強度提高了四倍。上面說過，將厚度增加一倍會使（“標準”橫截面的）構件重量增加兩倍。對於重量敏感型設計（在電子外殼行業中最普遍）而言，這可能是“災難”。但是，通過添加肋骨，肋骨是厚度的“間斷性”添加，強度顯著提高（而重量僅少量增加）。設計人員可能會驚訝地發現添加肋條實際上會增加最大應力。為什麼是這樣？儘管肋增加了板的整體慣性矩，對於短肋，從中性軸到橫截面（c）的極限纖維的距離可以更快地增加。對於間距較大的肋骨，此效果最為明顯。讓我們回到計算Sratio（無肋骨和單肋骨設計的最大允許應力比）的七個步驟，這是一個非常簡單的肋骨添加，其中“肋骨”不是錐形的，即T = t：板（B）= 1英寸單肋骨，肋骨高度（H）= 0.375基座厚度（W）= 0.125英寸Wr = 0.0.125 / 1.00 = 0.125肋骨高度/基座厚度= 0.375 / 0.125 = 3.0 BB eq英寸= = 100 tT = 0 125.i nch 讓我們回到計算Sratio（無肋骨和單肋骨設計的最大允許應力比）的七個步驟，這是一個非常簡單的肋骨添加，其中“肋骨”不是錐形的，即T = t：板（B）= 1英寸單肋骨，肋骨高度（H）= 0.375基座厚度（W）= 0.125英寸Wr = 0.0.125 / 1.00 = 0.125肋骨高度/基座厚度= 0.375 / 0.125 = 3.0 BB eq英寸= = 100 tT = 0 125.i nch 讓我們回到計算Sratio（無肋骨和單肋骨設計的最大允許應力比）的七個步驟，這是一個非常簡單的肋骨添加，其中“肋骨”不是錐形的，即T = t：板（B）= 1英寸單肋骨，肋骨高度（H）= 0.375基座厚度（W）= 0.125英寸Wr = 0.0.125 / 1.00 = 0.125肋骨高度/基座厚度= 0.375 / 0.125 = 3.0 BB eq英寸= = 100 tT = 0 125.i nch \n \xa0 \n Ar BWHTt = ++（）（）=×（）+×（）= eq在/ ...中 21 0 125 0 375 0 125 0 172 2 \n \xa0 \n \xa0 \n Y = +（）−（）+（）+（）（）= − = 0 375 0 125 0 047 0 053 0 035 1 032 05 0 131 .. ... / ... 0 0 369 0 0078 0 026 12 0 172 0 375 0 369 0 00282 2 .. .. / ...）。in Ir = +（）-（）=--= 0 00001 0 0028 4 .. in \n \xa0 \n Io = 0 \n 00016 4 .in Sratio =（）（）=（）（）= 20 00016 0 0028 0 365 0 125 20057 2920 33./ .. /。... \n \xa0 \n 因此，在設計中增加了肋條，使斷面強度提高了約三倍。《注射成型雜誌》（參考文獻7）文章還比較了帶肋/無肋截面的撓度比。 \n \xa0 \n 3.4.3另一個撓曲問題，這一次是扣合鉤（摘自Mobay設計手冊，塑料扣合接頭） \n 這個問題是機箱設計人員在設計常用功能時所面對的一個很好的例子，即“扣合” 。” 卡扣接頭是連接兩個不同組件的非常簡單，經濟且快速的方法。由於這消除了將兩個部件連接在一起的緊固件，因此非常頻繁地使用它。該設計利用了其中一個零件（“鉤”）的突出特徵，而另一零件則包含孔（或“底切”）。這裡的想法是，鉤在連接操作過程中短暫偏轉，並卡入底切以完成配合操作。選擇了以下介紹性問題： \n A.顯示了一種通用的緊固方法（用於塑料）。 \n B.顯示出使用材料的共同強度的公式以利用材料的彈性特性的方式使用，撓曲在設計中用作優點，並且使橫截面積和均勻應變最優化。 \n C.介紹了使用塑料材料進行設計的某些方面。 \n D.利用供應商提供的文獻資料（在本例中為Mobay Plastics）。代替通過第一原理來解決一些更複雜（至今）的問題，列表選項和列線圖的使用可以大大減少所需的設計時間。該計算示例針對的是矩形橫截面的卡扣式掛鉤，其厚度從掛鉤的根部的h逐漸減小到掛鉤的末端的h / 2（見圖3.5）。因此，這是設計類型2（請參見參考表）。總體設計目標是用最少的材料實現最大的變形。給定：材料=聚碳酸酯 \n 長度（l）= 0.75英寸寬度（b）= 0.37英寸底切（y）= 0.094英寸傾角（α）= 30°發現：厚度（h），在該厚度下，全撓度（y）會引起應變的½。允許的應變。從表中（對於聚碳酸酯），ε（允許）= 4％；因此，ε（允許）＝ 2％。從表（類型2設計） \n yl h ==××= 10 91 09 0020 75 0 094 013 22 ./.../ ..ε英寸 \n 撓曲力（P）從表（力方程式） \n \xa0 \n PbhE l =（）（ ）²// 6ε \n \xa0 \n 從聚碳酸酯（ε= 2％）的圖中，E = 264,000 psi \n \xa0 \n Pl b =×（）××（）= 03 70 13 6 264000 002037 29 .. /。/。..†， \n \xa0 \n 配合力（W） \n \xa0 \n WP = +（）−（）µα µα tan / tan 1 \n \xa0 \n 表中的摩擦係數（PC對PC）μ= 0.50。1.2 = 0.6。從圖中可以看出，對於μ= 0.6和α= 30°W =×= 29 1754 3 ..（μ+ tanα）/（1-μtanα）= 1.75 \n \xa0 \n 3.5動態載荷 \n 電子機櫃中構件的動態載荷是由於載荷以非穩態方式承受在構件上的。它們包括但不限於： \n A.具有振幅和頻率的振動載荷（包括與地震地面運動相關的風力或慣性力） \n B.離散衝擊載荷在這些振動和衝擊載荷情況下，將探討一些問題。小伙子 關於“產品環境”的第7條。 \n 本章小結在本章中，我向EPE設計器介紹了外殼結構方面的一些基本注意事項。我們可以通過為這些外部船體提供材料來開始這種設計。同樣，我們的設計處置將是選擇船體的橫截面。這些橫截面和材料的最佳選擇是利用易於獲得的材料方程式的強度來進行的。但是，在各種解決方案中都需要做出選擇，並且要確定最佳設計，不僅要單獨考慮結構，還需要更多考慮。此外，我們還介紹了一種用於設計電子外殼結構的通用過程。首先要看先前的設計，確定結構上的力，然後繼續確定設計中的安全因素。從那裡，我們看了一些示例，這些示例說明了結構設計中的常見問題。我們以一小節結束了關於其他復雜性和需要注意的方面，這是對Chap的介紹。4。 \n 參考文獻 \n 本章再次回顧了結構方面的考慮，因為它們與電子外殼設計中遇到的結構有關。讀者可能還有許多其他信息來源，但多年來（多年來）我一直使用以下主要信息來源： \n \xa0 \n \n Roark RJ，Young WC（1975）應力和應變公式。紐約麥格勞-希爾 \n \n 出版社。 \n \n Byars EF，Snyder RD（1969）可變形體的工程力學。International Textbook Co.，Scranton \n \n 3.有關EMI屏蔽材料的選擇和應用的設計指南。TECKNIT，《 EMI屏蔽產品》（1991年）。 \n 4.《注塑成型》雜誌，1998年5月，陶氏材料工程中心的R. Cramer \n', 'tags': '', 'url': 'part4.html'}, {'title': 'Assignment1', 'text': '\n', 'tags': '', 'url': 'Assignment1.html'}, {'title': 'Python3.8.2', 'text': 'basic Win10 portable programming \n 在你的可攜下創建一個data子目錄\xa0 :\xa0\xa0 \n \n --everything-is-local\xa0 \xa0 \n https://git-scm.com/download/win \xa0 \xa0 \xa0 \xa0 \xa0 \n 要用git指令要有portablegit 。data下子目錄存取為portablegit(需與啟動檔配合)。 \n start.bat (參考) : \n \n . \n .. \n ... \n ================================================================= \n \n https://www.python.org/downloads/ \n 選取需要的版本(EX : 3.8.2)\xa0 \n 點取執行檔 Windows x86-64 executable installer \n data下子目錄 存取的名稱要跟執行檔相配合(EX : py38) \n \n . \n .. \n ... \n ================================================================= \n \n \n \n \n \n Download Scintilla and SciTE \n \n \n \n 編輯器(用來創建start.bat , stop.bat) https://www.scintilla.org/SciTEDownload.html \n 解開檔案為wscite \n 通過打開SciTE.exe\xa0 \\ Option \\ Open Global Options File \n 找到code.page的部分 , 把code.page=0給註記掉 , 並把code.page=65001取消註記 \n \n \n start.bat\xa0 : \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n \n \n \n @echo off \n set Disk=y \n subst %Disk%: "data" \n \xa0 \n %Disk%: \n \xa0 \n set HomePath=%Disk%:\\home_mdecourse \n set HomeDrive=%Disk%:\\home_mdecourse \n set Home=%Disk%:\\home_mdecourse \n set USERPROFILE=%Disk%:\\home_mdecourse \n \xa0 \n REM for putty \n set GIT_HOME=%Disk%:\\portablegit\\bin\\ \n set GIT_SSH=%Disk%:\\putty\\plink.exe \n \xa0 \n REM 將系統 Python 程式的 io 設為 utf-8 \n set PYTHONIOENCODING="utf-8" \n \xa0 \n set PYTHONPATH=%Disk%:\\py38\\DLLs;%Disk%:\\py38\\Lib;%Disk%:\\py38\\Lib\\site-packages; \n set PYTHONHOME=%Disk%:\\py38 \n \xa0 \n set path_python=%Disk%:\\py38;%Disk%:\\py38\\Scripts; \n set path_msys2=%Disk%:\\msys64\\mingw64\\bin; \n REM coreutils is for compiling fossil scm \n set path_coreutils=%Disk%:\\coreutils-5.3.0\\bin;%Disk%:\\depends22_x64; \n set path_tcc=%Disk%:\\tcc; \n set path_cmake=%Disk%:\\cmake-3.10.1-win64-x64\\bin; \n set path_nodejs=Disk%:\\nodejs;%Disk%:\\nodejs\\appdata\\roaming\\npm; \n set path_git=%Disk%:\\portablegit\\bin; \n set path_xming=%Disk%:\\Xming; \n set path_latex=%%Disk%:\\Pandoc;%Disk%:\\TinyTeX\\bin\\win32; \n \xa0 \n path=%Disk%:;%path_python%;%path_msys2%;%path_tcc%;%path_git%;%path_cmake%;%path_coreutils%; \n \xa0 \n start /MIN cmd.exe \n start /MIN cmd.exe \n start /MIN cmd.exe \n start /MIN cmd.exe \n \xa0 \n start /MIN %Disk%:\\wscite\\SciTE.exe \n start /MIN %Disk%:\\wscite\\SciTE.exe \n \xa0 \n Exit \n \n \n \n \n \n \n \n \n stop.bat \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n \n \n \n @echo off \n set Disk=y \n path=%PATH%; \n \xa0 \n taskkill /IM python.exe /F \n taskkill /IM pythonw.exe /F \n taskkill /IM node.exe /F \n taskkill /IM Range.exe /F \n taskkill /IM SciTE.exe /F \n REM 終止虛擬硬碟與目錄的對應 \n subst %Disk%: /D \n REM 關閉 cmd 指令視窗 \n taskkill /IM cmd.exe /F \n EXIT \n \n \n \n \n \n \n \n - \n 假使要快速比較修改前後 :，可使用一個工具 :\xa0 \n \xa0 KDiff3 - Home \n http://kdiff3.sourceforge.net/ \n \n \n 可即時看到檔案間的差別 \n 也可以用來比較 Tiny C Compiler\xa0\xa0 \n https://directory.fsf.org/wiki/Tiny_C_Compiler \xa0\xa0 檔案編輯前後的差異 \n \n \n https://bellard.org/tcc/ \n . \n .. \n ... \n ================================================================ \n pip \n get-pip.py 頁面存取成data下的get-pip.py \n 再繼續用 : \n \n \n \n \n \n \n 1 \n \n \n \n python -m pip install flask lxml bs4 flask-cors Markdown pelican leo \n \n \n \n \n \n \n \n 下載網際系統相關套件 \n \n ============================================================== \n \n HxD - Freeware Hex Editor and Disk Editor \n \n \n \n \n https://mh-nexus.de/en/hxd/ \xa0 \xa0 \xa0 \n 選取該version區目前適合的版本 \n 利用 HxD 修改 pip.exe 中python.exe 的所在位置(pip.exe是存取在p38的Scripts裡) , HxD 開啟之後搜尋c:\\py38\\python.exe , 然後將滑鼠停在 c 然後輸入y:\\p37\\python.exe, 以便讓可攜系統啟動後, 可以將指令搜尋路徑設到 y:\\p38\\Scripts , 這樣就可以直接以\xa0 "pip install " 指令安裝套件. \n \n \n \n \n \n \n 1 \n \n \n \n pip install Flask Markdown lxml bs4 flask_cors pelican leo \n \n \n \n \n \n \n \n \n . \n .. \n ... \n ================================================================ \n MSYS2 installer \n MSYS2 :\xa0 https://www.msys2.org/ \n \n 接著設定start.bat \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n \n \n \n REM 設定 msys2 64 位元的執行路徑 \n set path_msys2=%Disk%:\\msys64\\mingw64\\bin; \n \xa0 \n path=%Disk%:;%path_python%;%path_git%;%path_msys2%; \n \n \n \n \n \n \n \n \n . \n .. \n ... \n ================================================================= \n ShareX \n ShareX :\xa0 https://getsharex.com/ \n \n . \n .. \n ... \n ================================================================= \n Tmp (Y\\tmp : git clone .....) \n \n . \n .. \n ... \n ================================================================= \n https://github.com/flutter/flutter \n . \n .. \n ... \n ================================================================= \n Fossil \n \n https://www.fossil-scm.org/index.html/doc/trunk/www/build.wiki \n \n \n . \n .. \n ... \n ================================================================= \n putty\xa0 putty \n \n', 'tags': '', 'url': 'Python3.8.2.html'}, {'title': 'CoppeliaSim', 'text': 'Assignment 1-3分工 \n https://www.coppeliarobotics.com/helpFiles/index.html \n \n \n CoppeliaSim 高度可定制的模擬器，可以自定義模擬的每個方面。此外模擬器本身可以進行定制，以使性能完全符合要求。 \n 這可以通過精心設計的應用程序編程接口（API）來實現。 \n 支持六種不同的編程或編碼方法，每種方法都具有相對於其他方法的特殊優點（顯然還有缺點），但所有六種方法都是相互兼容的（即可以同時使用，甚至可以協同使用）。 \n', 'tags': '', 'url': 'CoppeliaSim.html'}, {'title': 'Random grouping', 'text': '\n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n \n \n \n import   requests \n import   random \n url  =   "https://mde.tw/cd2020/downloads/2020spring_cd_2a_list.txt" \n Msource  =   requests.get(url) \n #print(Msource.text) \n member  =   Msource.text \n mlist  =   member.split( "\\n" ) \n mlist.pop() \n #print(member) \n mlen  =   len (mlist) \n #print(mlist[0:13]) \n random.shuffle(mlist) \n \xa0 \n g1  =   13 \n g2  =   2 * g1 \n g3  =   3 * g1 \n g4  =   int (mlen) \n \xa0 \n print ( "全班共" ,mlen, "人" ) \n for   i  in   range ( 1 , 5 ): \n \xa0\xa0\xa0\xa0 print ( "Group" ,i, ":" ) \n \xa0\xa0\xa0\xa0 if   (i  = =   1 ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   j  in   range ( 0 ,g1): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print (mlist[j]) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 j  + =   1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "-" * 20 ) \n \xa0\xa0\xa0\xa0 elif   (i  = =   2 ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   m  in   range (g1,g2): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print (mlist[g1]) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 g1  + =   1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "-" * 20 ) \n \xa0\xa0\xa0\xa0 elif   (i  = =   3 ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   k  in   range (g2,g3): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print (mlist[g2]) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 g2  + =   1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "-" * 20 ) \n \xa0\xa0\xa0\xa0 elif   (i  = =   4 ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   l  in   range (g3,g4): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print (mlist[g3]) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 g3  + =   1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "-" * 20 ) \n print (mlist) \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Random grouping.html'}]};